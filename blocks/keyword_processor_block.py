from blocks.base_block import BaseBlock
from typing import Dict, List, Any, Optional
import logging
import re

logger = logging.getLogger(__name__)


class KeywordProcessorBlock(BaseBlock):
    """–ë–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"""
    
    def __init__(self, node_data: Dict[str, Any]):
        super().__init__(node_data)
        self.type = "keyword_processor"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
        self.node_data = node_data
        self.data = node_data.get('data', {})
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞
        self.keywords = self.data.get('keywords', [])
        
        # –ü–æ–ª—É—á–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
        self.case_sensitive = self.data.get('caseSensitive', False)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ)
        self.match_mode = self.data.get('matchMode', 'exact')  # 'exact' –∏–ª–∏ 'partial'
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {self.keywords}")

    @staticmethod
    def get_block_type() -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –±–ª–æ–∫–∞"""
        return "keyword_processor"

    @classmethod
    def get_node_label(cls) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∫—É —É–∑–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"""
        return "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"

    @classmethod
    def get_node_description(cls) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —É–∑–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"""
        return "–ë–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"

    @classmethod
    def get_node_icon(cls) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É —É–∑–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"""
        return "üîç"

    @classmethod
    def get_node_color(cls) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç —É–∑–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"""
        return "#FF9800"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç

    @classmethod
    def get_node_fields(cls) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π —É–∑–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"""
        return [
            {
                "name": "keywords",
                "label": "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
                "type": "array",
                "description": "–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
                "default": []
            },
            {
                "name": "caseSensitive",
                "label": "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É",
                "type": "boolean",
                "description": "–£—á–∏—Ç—ã–≤–∞—Ç—å –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤",
                "default": False
            },
            {
                "name": "matchMode",
                "label": "–†–µ–∂–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è",
                "type": "select",
                "options": [
                    {"value": "exact", "label": "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"},
                    {"value": "partial", "label": "–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"}
                ],
                "description": "–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
                "default": "exact"
            }
        ]

    def process(self, bot, chat_id: int, user_message: str = "", **kwargs) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞
            user_message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ keyword_processor: {user_message}")
            
            if not user_message:
                logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            matched_keyword = self._check_keywords(user_message)
            
            if matched_keyword:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {matched_keyword}")
                # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
                return True
            else:
                logger.info("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
                # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥—Ä—É–≥–∏–º –±–ª–æ–∫–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞ keyword_processor: {e}")
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
            return False

    def _check_keywords(self, message: str) -> Optional[str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            Optional[str]: –ù–∞–π–¥–µ–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ None
        """
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
        search_message = message if self.case_sensitive else message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        for keyword in self.keywords:
            if not keyword:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                continue
                
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
            search_keyword = keyword if self.case_sensitive else keyword.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            if self.match_mode == 'exact':
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–æ–º
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
                pattern = r'\b' + re.escape(search_keyword) + r'\b'
                if re.search(pattern, search_message):
                    return keyword
            else:
                # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é –¥—Ä—É–≥–æ–≥–æ —Å–ª–æ–≤–∞
                if search_keyword in search_message:
                    return keyword
                    
        return None

    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–ª–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            "id": self.node_data.get('id'),
            "type": self.type,
            "data": self.data
        }

    def execute(self, bot, chat_id: int, **kwargs) -> Optional[str]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–ª–æ–∫ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            Optional[str]: ID —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞ –∏–ª–∏ None
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_message = kwargs.get('user_message', '')
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        success = self.process(bot, chat_id, user_message, **kwargs)
        
        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã ScenarioRunner –∏—Å–∫–∞–ª —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–≤—è–∑–∏
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã
        return None
