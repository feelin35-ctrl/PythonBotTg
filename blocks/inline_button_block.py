from .base_block import BaseBlock
import telebot
from typing import Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)


class InlineButtonBlock(BaseBlock):

    @staticmethod
    def get_block_type() -> str:
        return "inline_button"

    def execute(self, bot: telebot.TeleBot, chat_id: int, **kwargs) -> Optional[str]:
        buttons = self.node_data.get('data', {}).get('buttons', [])
        message_text = self.node_data.get('data', {}).get('label', '')

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        if not message_text:
            message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
            logger.warning("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞")

        if not buttons:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫")
            bot.send_message(chat_id, message_text)
            return None

        try:
            # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = telebot.types.InlineKeyboardMarkup()

            for button in buttons:
                button_text = button.get('label', '')
                if not button_text:
                    button_text = "–ö–Ω–æ–ø–∫–∞"
                    logger.warning("‚ö†Ô∏è –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞")

                callback_data = button.get('callbackData', f"btn_{hash(button_text) % 10000}")
                markup.add(telebot.types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=callback_data
                ))

            logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏: {message_text}")
            bot.send_message(chat_id, message_text, reply_markup=markup)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ inline-–∫–Ω–æ–ø–æ–∫: {e}")
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                bot.send_message(chat_id, message_text)
                for button in buttons:
                    button_text = button.get('label', '–ö–Ω–æ–ø–∫–∞')
                    bot.send_message(chat_id, f"üîò {button_text}")
            except Exception as fallback_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback: {fallback_error}")

        return None

    def get_next_node_id_for_button(self, callback_data: str, edges) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π inline-–∫–Ω–æ–ø–∫–∏"""
        buttons = self.node_data.get('data', {}).get('buttons', [])

        for index, button in enumerate(buttons):
            button_text = button.get('label', '–ö–Ω–æ–ø–∫–∞')
            btn_callback = button.get('callbackData', f"btn_{hash(button_text) % 10000}")
            if btn_callback == callback_data:
                return self.get_next_node_id(edges, str(index))

        return None