import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import styled from 'styled-components';
import { breakpoints, mediaQueries } from '../styles/responsive';

// –°—Ç–∏–ª–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
const Container = styled.div`
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
  
  ${mediaQueries.tablet} {
    padding: 15px;
  }
  
  ${mediaQueries.mobile} {
    padding: 10px;
  }
`;

const Title = styled.h1`
  text-align: center;
  margin-bottom: 30px;
  
  ${mediaQueries.tablet} {
    margin-bottom: 20px;
    font-size: 1.5rem;
  }
  
  ${mediaQueries.mobile} {
    margin-bottom: 15px;
    font-size: 1.3rem;
  }
`;

const FormGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
  
  ${mediaQueries.tablet} {
    grid-template-columns: 1fr;
    gap: 15px;
    margin-bottom: 20px;
  }
`;

const Card = styled.div`
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 8px;
  background-color: #f9f9f9;
  
  ${mediaQueries.tablet} {
    padding: 15px;
  }
  
  ${mediaQueries.mobile} {
    padding: 10px;
  }
`;

const Input = styled.input`
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin-bottom: 15px;
  box-sizing: border-box;
  
  ${mediaQueries.mobile} {
    padding: 6px;
    margin-bottom: 10px;
  }
`;

const Button = styled.button`
  padding: 10px 15px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 10px;
  
  &:hover {
    background-color: #0056b3;
  }
  
  ${mediaQueries.mobile} {
    padding: 8px 12px;
    margin-right: 5px;
    font-size: 14px;
  }
`;

const BotGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
  
  ${mediaQueries.tablet} {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 15px;
  }
  
  ${mediaQueries.mobile} {
    grid-template-columns: 1fr;
    gap: 10px;
  }
`;

const BotCard = styled.div`
  padding: 15px;
  border: 1px solid #ddd;
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  gap: 10px;
  
  ${mediaQueries.mobile} {
    padding: 10px;
  }
`;

const BotName = styled.div`
  font-weight: bold;
  font-size: 16px;
  text-align: center;
  
  ${mediaQueries.mobile} {
    font-size: 14px;
  }
`;

const ButtonGroup = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 5px;
  justify-content: center;
  
  ${mediaQueries.mobile} {
    gap: 3px;
  }
`;

const ActionButton = styled.button`
  padding: 8px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 5px;
  flex: 1 1 auto;
  min-width: 100px;
  justify-content: center;
  font-size: 14px;
  
  ${mediaQueries.mobile} {
    padding: 6px 10px;
    font-size: 12px;
    min-width: 80px;
  }
`;

const ResponsiveBotList = () => {
  const [bots, setBots] = useState([]);
  const [newBotName, setNewBotName] = useState("");
  const [botToken, setBotToken] = useState("");
  const [showTokenInput, setShowTokenInput] = useState(false);
  const [showImportForm, setShowImportForm] = useState(false);
  const [importFile, setImportFile] = useState(null);
  const [importProgress, setImportProgress] = useState("");
  const [renamingBotId, setRenamingBotId] = useState(null);
  const [renameValue, setRenameValue] = useState("");
  const navigate = useNavigate();

  const fetchBots = async () => {
    try {
      console.log("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤...");
      const response = await axios.get(`/api/get_bots/`);
      console.log("–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:", response.data);
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ response.data.bots —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
      if (response.data && Array.isArray(response.data.bots)) {
        setBots(response.data.bots);
      } else {
        setBots([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤:", error);
      setBots([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
  };

  useEffect(() => {
    fetchBots();
  }, []);

  const handleCreateBot = async () => {
    if (!newBotName.trim()) {
      alert("–ò–º—è –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
      return;
    }

    if (!botToken.trim()) {
      alert("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
      return;
    }

    try {
      // 1. –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
      console.log("–°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞...");
      await axios.post(`/api/create_bot/?bot_id=${newBotName}`);

      // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL)
      console.log("–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω...");
      await axios.post(`/api/save_token/${newBotName}/`, {
        token: botToken
      });

      // 3. –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
      console.log("–°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π...");
      const initialScenario = {
        nodes: [
          {
            id: "1",
            type: "start",
            data: {
              blockType: "start",
              label: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."
            },
            position: { x: 250, y: 100 }
          },
          {
            id: "2",
            type: "message",
            data: {
              blockType: "message",
              label: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!"
            },
            position: { x: 250, y: 200 }
          }
        ],
        edges: [
          {
            source: "1",
            target: "2"
          }
        ]
      };

      await axios.post(`/api/save_scenario/${newBotName}/`, initialScenario);

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
      console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...");
      const tokenCheck = await axios.get(`/api/get_token/${newBotName}/`);
      console.log("–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω:", tokenCheck.data.token ? "–¥–∞" : "–Ω–µ—Ç");

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setNewBotName("");
      setBotToken("");
      setShowTokenInput(false);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      console.log("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤...");
      await fetchBots();

      alert(`–ë–æ—Ç "${newBotName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º!`);

    } catch (error) {
      console.error("–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: " + (error.response?.data?.message || error.message));
    }
  };

  const handleDeleteBot = async (botId) => {
    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ "${botId}"?`)) {
      try {
        await axios.delete(`/api/delete_bot/${botId}/`);
        await axios.delete(`/api/delete_token/${botId}/`);
        console.log("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è...");
        await fetchBots();
      } catch (error) {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + (error.response?.data?.message || error.message));
      }
    }
  };

  const handleStartCreate = () => {
    if (!newBotName.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ —Å–Ω–∞—á–∞–ª–∞.");
      return;
    }
    setShowTokenInput(true);
  };

  const handleCancelCreate = () => {
    setShowTokenInput(false);
    setBotToken("");
  };

  const handleImportBot = async () => {
    if (!importFile) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞");
      return;
    }

    try {
      setImportProgress("üìÇ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª...");
      
      const fileText = await importFile.text();
      const importData = JSON.parse(fileText);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      if (!importData.bot_id || !importData.scenario || !importData.token) {
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞");
      }
      
      setImportProgress("üöÄ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞...");
      
      const response = await axios.post(`/api/import_bot/`, importData);
      
      if (response.data.status === "success") {
        setImportProgress("");
        setShowImportForm(false);
        setImportFile(null);
      
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
        console.log("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞...");
        await fetchBots();
      
        alert(`‚úÖ ${response.data.message}\nüîñ –ë–æ—Ç: @${response.data.bot_info?.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      } else {
        throw new Error(response.data.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
      }
      
    } catch (error) {
      setImportProgress("");
      console.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:", error);
      
      let errorMessage = "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ";
      
      if (error.response?.data?.message) {
        errorMessage += error.response.data.message;
      } else if (error.message) {
        errorMessage += error.message;
      } else {
        errorMessage += "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      }
      
      alert(errorMessage);
    }
  };

  const handleExportBot = async (botId) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π endpoint –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ ZIP-–∞—Ä—Ö–∏–≤–∞
      const response = await fetch(`/api/export_bot_zip/${botId}/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      if (response.ok) {
        // –ü–æ–ª—É—á–∞–µ–º blob –∏ —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const link = document.createElement('a');
        link.href = url;
        link.download = `bot_${botId}_deploy.zip`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
        
        alert(`‚úÖ –ë–æ—Ç "${botId}" —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ ZIP-–∞—Ä—Ö–∏–≤`);
      } else {
        const errorData = await response.json();
        throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞");
      }
      
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:", error);
      alert("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: " + (error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"));
    }
  };

  const handleCancelImport = () => {
    setShowImportForm(false);
    setImportFile(null);
    setImportProgress("");
  };

  const startRename = (botId) => {
    setRenamingBotId(botId);
    setRenameValue(botId);
  };

  const cancelRename = () => {
    setRenamingBotId(null);
    setRenameValue("");
  };

  const confirmRename = async () => {
    if (!renameValue.trim()) {
      alert("–ù–æ–≤–æ–µ –∏–º—è –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
      return;
    }

    if (renameValue === renamingBotId) {
      cancelRename();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –∏–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±–æ—Ç–∞–º–∏
    if (bots.includes(renameValue)) {
      alert(`–ë–æ—Ç —Å –∏–º–µ–Ω–µ–º "${renameValue}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
      return;
    }

    try {
      const response = await axios.post(`/api/rename_bot/${renamingBotId}/${renameValue}/`);
      if (response.data.status === "success") {
        setRenamingBotId(null);
        setRenameValue("");
        console.log("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è...");
        await fetchBots();
        alert(response.data.message);
      }
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: " + (error.response?.data?.detail || error.message));
    }
  };

  return (
    <Container>
      <Title>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Telegram –±–æ—Ç–æ–≤</Title>

      <FormGrid>
        {/* –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ */}
        <Card>
          <h3>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞</h3>

          <Input
            type="text"
            value={newBotName}
            onChange={(e) => setNewBotName(e.target.value)}
            placeholder="–ò–º—è –±–æ—Ç–∞"
            disabled={showTokenInput}
          />

          {showTokenInput && (
            <Input
              type="password"
              value={botToken}
              onChange={(e) => setBotToken(e.target.value)}
              placeholder="–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather"
              style={{ fontFamily: "monospace" }}
            />
          )}

          <div style={{ display: "flex", gap: "10px", flexWrap: "wrap" }}>
            {!showTokenInput ? (
              <Button onClick={handleStartCreate}>
                –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞
              </Button>
            ) : (
              <>
                <Button onClick={handleCreateBot} style={{ backgroundColor: "#28a745" }}>
                  –°–æ–∑–¥–∞—Ç—å
                </Button>
                <Button onClick={handleCancelCreate} style={{ backgroundColor: "#6c757d" }}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </>
            )}
          </div>
        </Card>

        {/* –ò–º–ø–æ—Ä—Ç –±–æ—Ç–∞ */}
        <Card style={{ backgroundColor: "#f0f8ff" }}>
          <h3>üìÇ –ò–º–ø–æ—Ä—Ç –±–æ—Ç–∞</h3>
          
          {!showImportForm ? (
            <div>
              <p style={{ color: "#666", marginBottom: "15px" }}>
                –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–Ω–µ–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
              </p>
              <Button 
                onClick={() => setShowImportForm(true)} 
                style={{ backgroundColor: "#17a2b8" }}
              >
                üìÇ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
              </Button>
            </div>
          ) : (
            <div>
              <div style={{ marginBottom: "15px" }}>
                <label style={{ display: "block", marginBottom: "5px", fontWeight: "bold" }}>
                  –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ (.json):
                </label>
                <Input
                  type="file"
                  accept=".json"
                  onChange={(e) => setImportFile(e.target.files[0])}
                />
              </div>
              
              {importProgress && (
                <div style={{ 
                  marginBottom: "15px", 
                  padding: "10px", 
                  backgroundColor: "#e7f3ff", 
                  border: "1px solid #bee5eb", 
                  borderRadius: "4px", 
                  color: "#0c5460" 
                }}>
                  {importProgress}
                </div>
              )}
              
              <div style={{ display: "flex", gap: "10px", flexWrap: "wrap" }}>
                <Button 
                  onClick={handleImportBot} 
                  disabled={!importFile || importProgress}
                  style={{ 
                    backgroundColor: importFile && !importProgress ? "#28a745" : "#6c757d",
                    cursor: importFile && !importProgress ? "pointer" : "not-allowed"
                  }}
                >
                  üöÄ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                </Button>
                <Button 
                  onClick={handleCancelImport}
                  disabled={importProgress}
                  style={{ 
                    backgroundColor: "#6c757d",
                    cursor: importProgress ? "not-allowed" : "pointer"
                  }}
                >
                  ‚ùå –û—Ç–º–µ–Ω–∞
                </Button>
              </div>
            </div>
          )}
        </Card>
      </FormGrid>

      {/* –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ */}
      <div>
        <h3>–ú–æ–∏ –±–æ—Ç—ã ({Array.isArray(bots) ? bots.length : 0})</h3>
        {!Array.isArray(bots) || bots.length === 0 ? (
          <p>–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤</p>
        ) : (
          <BotGrid>
            {Array.isArray(bots) && bots.map((bot) => (
              <BotCard key={bot}>
                {renamingBotId === bot ? (
                  <div style={{ display: "flex", flexDirection: "column", gap: "10px" }}>
                    <Input
                      type="text"
                      value={renameValue}
                      onChange={(e) => setRenameValue(e.target.value)}
                      placeholder="–ù–æ–≤–æ–µ –∏–º—è –±–æ—Ç–∞"
                      onKeyDown={(e) => {
                        if (e.key === 'Enter') {
                          confirmRename();
                        } else if (e.key === 'Escape') {
                          cancelRename();
                        }
                      }}
                      autoFocus
                    />
                    <ButtonGroup>
                      <ActionButton 
                        onClick={confirmRename}
                        style={{ backgroundColor: "#28a745", color: "white" }}
                      >
                        ‚úì
                      </ActionButton>
                      <ActionButton 
                        onClick={cancelRename}
                        style={{ backgroundColor: "#6c757d", color: "white" }}
                      >
                        ‚úï
                      </ActionButton>
                    </ButtonGroup>
                  </div>
                ) : (
                  <>
                    <BotName>{bot}</BotName>
                    <ButtonGroup>
                      <ActionButton 
                        onClick={() => startRename(bot)}
                        style={{ backgroundColor: "#ffc107", color: "black" }}
                      >
                        ‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
                      </ActionButton>
                      <ActionButton 
                        onClick={() => navigate(`/editor/${bot}`)}
                        style={{ backgroundColor: "#007bff", color: "white" }}
                      >
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </ActionButton>
                      <ActionButton 
                        onClick={() => handleExportBot(bot)}
                        style={{ backgroundColor: "#17a2b8", color: "white" }}
                      >
                        üì§ –≠–∫—Å–ø–æ—Ä—Ç
                      </ActionButton>
                      <ActionButton 
                        onClick={() => handleDeleteBot(bot)}
                        style={{ backgroundColor: "#dc3545", color: "white" }}
                      >
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                      </ActionButton>
                    </ButtonGroup>
                  </>
                )}
              </BotCard>
            ))}
          </BotGrid>
        )}
      </div>
    </Container>
  );
};

export default ResponsiveBotList;