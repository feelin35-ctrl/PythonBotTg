import React, { useState, useEffect } from 'react';
import { controlPanelStyles, mobileControlPanelStyles } from './styles';

const ControlPanel = ({
  botToken,
  setBotToken,
  botName, // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
  setBotName, // –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
  onSaveToken,
  onSaveBotName, // –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞
  onSaveScenario,
  onDeleteSelected,
  onDeleteAll,
  onRunBot,
  onRestartBot,
  onStopBot, // ‚Üê –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  onNavigateBack,
  nodesCount,
  edgesCount,
  selectedCount,
  botId,
  isBotRunning, // ‚Üê –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
  loadingStatus // ‚Üê –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
}) => {
  const [showTokenInput, setShowTokenInput] = useState(false);
  const [showBotNameInput, setShowBotNameInput] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞
  const [showStats, setShowStats] = useState(false);
  const [isRestarting, setIsRestarting] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∏ –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const styles = isMobile ? mobileControlPanelStyles : controlPanelStyles;

  const handleRestart = async () => {
    if (typeof onRestartBot !== 'function') {
      console.error('onRestartBot is not a function');
      alert('–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return;
    }

    setIsRestarting(true);
    try {
      await onRestartBot();
    } catch (error) {
      console.error('Error restarting bot:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞');
    } finally {
      setIsRestarting(false);
    }
  };

  const handleStop = async () => {
    if (typeof onStopBot !== 'function') {
      console.error('onStopBot is not a function');
      alert('–§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return;
    }

    try {
      await onStopBot();
    } catch (error) {
      console.error('Error stopping bot:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞');
    }
  };

  return (
    <div style={styles.panel}>
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ */}
      <div style={{
        display: 'flex',
        alignItems: 'center',
        marginRight: '5px',
        padding: isMobile ? '3px 6px' : '4px 8px',
        borderRadius: '12px',
        background: isBotRunning ? '#28a745' : '#dc3545',
        color: 'white',
        fontSize: isMobile ? '10px' : '12px',
        fontWeight: 'bold'
      }} title={isBotRunning ? '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω' : '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}>
        <div style={{
          width: isMobile ? '6px' : '8px',
          height: isMobile ? '6px' : '8px',
          borderRadius: '50%',
          background: 'white',
          marginRight: isMobile ? '4px' : '6px',
          animation: isBotRunning ? 'pulse 1.5s infinite' : 'none'
        }} />
        {isBotRunning ? 'ON' : 'OFF'}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
      <button onClick={onNavigateBack} style={{
        ...styles.button,
        ...styles.secondaryButton
      }} title="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É">
        ‚¨Ö
      </button>

      {/* –£–¥–∞–ª–µ–Ω–∏–µ */}
      <button onClick={onDeleteSelected} style={{
        ...styles.button,
        ...styles.dangerButton
      }} title="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∏ —Å–≤—è–∑–∏ (Delete)">
        üóëÔ∏è
      </button>

      <button onClick={onDeleteAll} style={{
        ...styles.button,
        ...styles.warningButton
      }} title="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏">
        üóëÔ∏è ALL
      </button>

      {/* –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ */}
      <button onClick={onSaveScenario} style={{
        ...styles.button,
        ...styles.primaryButton
      }} title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π">
        üíæ
      </button>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–º */}
      <div style={{ position: "relative" }}>
        <button onClick={() => setShowTokenInput(!showTokenInput)} style={{
          ...styles.button,
          ...styles.successButton
        }} title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–º">
          üîë
        </button>

        {showTokenInput && (
          <div style={styles.dropdown}>
            <input
              type="password"
              value={botToken}
              onChange={(e) => setBotToken(e.target.value)}
              placeholder="–¢–æ–∫–µ–Ω –±–æ—Ç–∞"
              style={{
                width: "100%",
                padding: isMobile ? "4px" : "6px",
                border: "1px solid #ccc",
                borderRadius: "4px",
                marginBottom: "5px",
                fontSize: isMobile ? "10px" : "12px"
              }}
            />
            <button onClick={onSaveToken} style={{
              ...styles.button,
              ...styles.successButton,
              width: "100%"
            }}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
            </button>
          </div>
        )}
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–µ–º –±–æ—Ç–∞ */}
      <div style={{ position: "relative" }}>
        <button onClick={() => setShowBotNameInput(!showBotNameInput)} style={{
          ...styles.button,
          ...styles.infoButton
        }} title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–µ–º –±–æ—Ç–∞">
          üìù
        </button>

        {showBotNameInput && (
          <div style={styles.dropdown}>
            <input
              type="text"
              value={botName}
              onChange={(e) => setBotName(e.target.value)}
              placeholder="–ò–º—è –±–æ—Ç–∞"
              style={{
                width: "100%",
                padding: isMobile ? "4px" : "6px",
                border: "1px solid #ccc",
                borderRadius: "4px",
                marginBottom: "5px",
                fontSize: isMobile ? "10px" : "12px"
              }}
            />
            <button onClick={onSaveBotName} style={{
              ...styles.button,
              ...styles.infoButton,
              width: "100%"
            }}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è
            </button>
          </div>
        )}
      </div>

      {/* –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ */}
      <button
        onClick={onRunBot}
        disabled={loadingStatus || isBotRunning || !botToken}
        style={{
          ...styles.button,
          ...styles.infoButton,
          opacity: (loadingStatus || isBotRunning || !botToken) ? 0.6 : 1
        }}
        title={!botToken ? "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω" : isBotRunning ? "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω" : "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"}
      >
        {loadingStatus ? '‚è≥' : '‚ñ∂Ô∏è'}
      </button>

      {/* –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ */}
      <button
        onClick={handleRestart}
        disabled={loadingStatus || !isBotRunning || !botToken}
        style={{
          ...styles.button,
          ...styles.warningButton,
          opacity: (loadingStatus || !isBotRunning || !botToken) ? 0.6 : 1
        }}
        title={!botToken ? "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω" : !isBotRunning ? "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞" : "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"}
      >
        {isRestarting ? '‚è≥' : 'üîÑ'}
      </button>

      {/* –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ */}
      <button
        onClick={handleStop}
        disabled={loadingStatus || !isBotRunning}
        style={{
          ...styles.button,
          ...styles.dangerButton,
          opacity: (loadingStatus || !isBotRunning) ? 0.6 : 1
        }}
        title={!isBotRunning ? "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω" : "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"}
      >
        {loadingStatus ? '‚è≥' : '‚èπÔ∏è'}
      </button>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div style={{ position: "relative" }}>
        <button onClick={() => setShowStats(!showStats)} style={{
          ...styles.button,
          background: "#f8f9fa",
          color: "#6c757d",
          border: "1px solid #dee2e6"
        }} title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞">
          üìä
        </button>

        {showStats && (
          <div style={styles.dropdown}>
            <div>–ë–ª–æ–∫–∏: {nodesCount}</div>
            <div>–°–≤—è–∑–∏: {edgesCount}</div>
            <div>–í—ã–±—Ä–∞–Ω–æ: {selectedCount}</div>
            <div>–°—Ç–∞—Ç—É—Å: {isBotRunning ? 'üü¢ –ó–∞–ø—É—â–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</div>
            <div style={{marginTop: '5px', paddingTop: '5px', borderTop: '1px solid #eee'}}>
              ID: {botId}
            </div>
          </div>
        )}
      </div>

      {/* –°—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—É–ª—å—Å–∞—Ü–∏–∏ */}
      <style>
        {`
          @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
          }
          
          /* –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */
          ::-webkit-scrollbar {
            height: 6px;
          }
          
          ::-webkit-scrollbar-track {
            background: #f1f1f1;
          }
          
          ::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
          }
          
          ::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
          }
        `}
      </style>
    </div>
  );
};

export default ControlPanel;