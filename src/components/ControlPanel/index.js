import React, { useState } from 'react';
import { controlPanelStyles } from './styles';

const ControlPanel = ({
  botToken,
  setBotToken,
  onSaveToken,
  onSaveScenario,
  onDeleteSelected,
  onDeleteAll,
  onUndo,
  onRedo,
  onRunBot,
  onRestartBot,
  onStopBot, // ‚Üê –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  onNavigateBack,
  nodesCount,
  edgesCount,
  selectedCount,
  canUndo,
  canRedo,
  botId,
  isBotRunning, // ‚Üê –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
  loadingStatus // ‚Üê –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
}) => {
  const [showTokenInput, setShowTokenInput] = useState(false);
  const [showStats, setShowStats] = useState(false);
  const [isRestarting, setIsRestarting] = useState(false);

  const handleRestart = async () => {
    if (typeof onRestartBot !== 'function') {
      console.error('onRestartBot is not a function');
      alert('–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return;
    }

    setIsRestarting(true);
    try {
      await onRestartBot();
    } catch (error) {
      console.error('Error restarting bot:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞');
    } finally {
      setIsRestarting(false);
    }
  };

  const handleStop = async () => {
    if (typeof onStopBot !== 'function') {
      console.error('onStopBot is not a function');
      alert('–§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return;
    }

    try {
      await onStopBot();
    } catch (error) {
      console.error('Error stopping bot:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞');
    }
  };

  return (
    <div style={controlPanelStyles.panel}>
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ */}
      <div style={{
        display: 'flex',
        alignItems: 'center',
        marginRight: '10px',
        padding: '4px 8px',
        borderRadius: '12px',
        background: isBotRunning ? '#28a745' : '#dc3545',
        color: 'white',
        fontSize: '12px',
        fontWeight: 'bold'
      }} title={isBotRunning ? '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω' : '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}>
        <div style={{
          width: '8px',
          height: '8px',
          borderRadius: '50%',
          background: 'white',
          marginRight: '6px',
          animation: isBotRunning ? 'pulse 1.5s infinite' : 'none'
        }} />
        {isBotRunning ? 'ON' : 'OFF'}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
      <button onClick={onNavigateBack} style={{
        ...controlPanelStyles.button,
        ...controlPanelStyles.secondaryButton
      }} title="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É">
        ‚¨Ö
      </button>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π */}
      <button onClick={onUndo} disabled={!canUndo} style={{
        ...controlPanelStyles.button,
        ...controlPanelStyles.secondaryButton,
        opacity: canUndo ? 1 : 0.5
      }} title="–û—Ç–º–µ–Ω–∏—Ç—å (Ctrl+Z)">
        ‚Ü©Ô∏è
      </button>

      <button onClick={onRedo} disabled={!canRedo} style={{
        ...controlPanelStyles.button,
        ...controlPanelStyles.secondaryButton,
        opacity: canRedo ? 1 : 0.5
      }} title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å (Ctrl+Y)">
        ‚Ü™Ô∏è
      </button>

      {/* –£–¥–∞–ª–µ–Ω–∏–µ */}
      <button onClick={onDeleteSelected} style={{
        ...controlPanelStyles.button,
        ...controlPanelStyles.dangerButton
      }} title="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∏ —Å–≤—è–∑–∏ (Delete)">
        üóëÔ∏è
      </button>

      <button onClick={onDeleteAll} style={{
        ...controlPanelStyles.button,
        ...controlPanelStyles.warningButton
      }} title="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –±–ª–æ–∫–∏">
        üóëÔ∏è ALL
      </button>

      {/* –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ */}
      <button onClick={onSaveScenario} style={{
        ...controlPanelStyles.button,
        ...controlPanelStyles.primaryButton
      }} title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π">
        üíæ
      </button>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–º */}
      <div style={{ position: "relative" }}>
        <button onClick={() => setShowTokenInput(!showTokenInput)} style={{
          ...controlPanelStyles.button,
          ...controlPanelStyles.successButton
        }} title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–º">
          üîë
        </button>

        {showTokenInput && (
          <div style={controlPanelStyles.dropdown}>
            <input
              type="password"
              value={botToken}
              onChange={(e) => setBotToken(e.target.value)}
              placeholder="–¢–æ–∫–µ–Ω –±–æ—Ç–∞"
              style={{
                width: "100%",
                padding: "6px",
                border: "1px solid #ccc",
                borderRadius: "4px",
                marginBottom: "5px",
                fontSize: "12px"
              }}
            />
            <button onClick={onSaveToken} style={{
              ...controlPanelStyles.button,
              ...controlPanelStyles.successButton,
              width: "100%"
            }}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
            </button>
          </div>
        )}
      </div>

      {/* –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ */}
      <button
        onClick={onRunBot}
        disabled={loadingStatus || isBotRunning || !botToken}
        style={{
          ...controlPanelStyles.button,
          ...controlPanelStyles.infoButton,
          opacity: (loadingStatus || isBotRunning || !botToken) ? 0.6 : 1
        }}
        title={!botToken ? "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω" : isBotRunning ? "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω" : "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"}
      >
        {loadingStatus ? '‚è≥' : '‚ñ∂Ô∏è'}
      </button>

      {/* –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ */}
      <button
        onClick={handleRestart}
        disabled={loadingStatus || !isBotRunning || !botToken}
        style={{
          ...controlPanelStyles.button,
          ...controlPanelStyles.warningButton,
          opacity: (loadingStatus || !isBotRunning || !botToken) ? 0.6 : 1
        }}
        title={!botToken ? "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω" : !isBotRunning ? "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞" : "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"}
      >
        {isRestarting ? '‚è≥' : 'üîÑ'}
      </button>

      {/* –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ */}
      <button
        onClick={handleStop}
        disabled={loadingStatus || !isBotRunning}
        style={{
          ...controlPanelStyles.button,
          ...controlPanelStyles.dangerButton,
          opacity: (loadingStatus || !isBotRunning) ? 0.6 : 1
        }}
        title={!isBotRunning ? "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω" : "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"}
      >
        {loadingStatus ? '‚è≥' : '‚èπÔ∏è'}
      </button>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div style={{ position: "relative" }}>
        <button onClick={() => setShowStats(!showStats)} style={{
          ...controlPanelStyles.button,
          background: "#f8f9fa",
          color: "#6c757d",
          border: "1px solid #dee2e6"
        }} title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞">
          üìä
        </button>

        {showStats && (
          <div style={controlPanelStyles.dropdown}>
            <div>–ë–ª–æ–∫–∏: {nodesCount}</div>
            <div>–°–≤—è–∑–∏: {edgesCount}</div>
            <div>–í—ã–±—Ä–∞–Ω–æ: {selectedCount}</div>
            <div>–°—Ç–∞—Ç—É—Å: {isBotRunning ? 'üü¢ –ó–∞–ø—É—â–µ–Ω' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</div>
            <div style={{marginTop: '5px', paddingTop: '5px', borderTop: '1px solid #eee'}}>
              ID: {botId}
            </div>
          </div>
        )}
      </div>

      {/* –°—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—É–ª—å—Å–∞—Ü–∏–∏ */}
      <style>
        {`
          @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
          }
        `}
      </style>
    </div>
  );
};

export default ControlPanel;