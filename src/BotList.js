import React, { useState, useEffect, useCallback } from "react";
import api from './api'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä axios
import { useNavigate } from "react-router-dom";
import { useAuth } from './components/Auth/AuthContext';

function BotList() {
  const { user } = useAuth();
  const [bots, setBots] = useState([]);
  const [newBotName, setNewBotName] = useState("");
  const [botToken, setBotToken] = useState("");
  const [showTokenInput, setShowTokenInput] = useState(false);
  const [showImportForm, setShowImportForm] = useState(false);
  const [importFile, setImportFile] = useState(null);
  const [importProgress, setImportProgress] = useState("");
  const [renamingBotId, setRenamingBotId] = useState(null);
  const [renameValue, setRenameValue] = useState("");
  const navigate = useNavigate();

  const fetchBots = useCallback(async () => {
    try {
      console.log("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤...");
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä axios
      console.log("Making API call to /api/get_bots/ with api instance");
      
      // Debug logging
      console.log("Current user:", user);
      
      // Pass user ID as query parameter if user is logged in
      const params = user ? { user_id: user.id } : {};
      console.log("API params:", params);
      
      const response = await api.get(`/api/get_bots/`, { params });
      
      console.log("–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:", response.data);
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ response.data.bots —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
      if (response.data && Array.isArray(response.data.bots)) {
        setBots(response.data.bots);
      } else {
        setBots([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤:", error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
      if (error.code === 'ECONNABORTED') {
        console.error('Connection timeout - please check if the backend server is running');
        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (window.innerWidth <= 768) {
          alert(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.`);
        }
      } else if (!error.response) {
        console.error('Network error - please check your connection');
        if (window.innerWidth <= 768) {
          alert(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.`);
        }
      }
      
      setBots([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
  }, [user]);

  useEffect(() => {
    fetchBots();
  }, [fetchBots]);

  const handleCreateBot = async () => {
    if (!newBotName.trim()) {
      alert("–ò–º—è –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
      return;
    }

    if (!botToken.trim()) {
      alert("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
      return;
    }

    try {
      // 1. –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ with user ID if user is logged in
      console.log("–°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞...");
      console.log("Current user:", user);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è user_id
      let userId = null;
      if (user && user.id) {
        userId = user.id;
        console.log("Using user ID from context:", userId);
      } else {
        console.log("No valid user ID found in context");
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç params
      const params = {
        bot_id: newBotName
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º user_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (userId) {
        params.user_id = userId;
      }
      
      console.log("API params:", params);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ Axios
      await api.post(`/api/create_bot/`, null, { params });

      // 2. –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ API –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
      // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±—Ä–∞—É–∑–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
      if (process.env.NODE_ENV === 'development') {
        localStorage.setItem(`botToken_${newBotName}`, botToken);
        console.log("–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)");
      }

      // 3. –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
      console.log("–°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π...");
      const initialScenario = {
        nodes: [
          {
            id: "1",
            type: "start",
            data: {
              blockType: "start",
              label: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."
            },
            position: { x: 250, y: 100 }
          },
          {
            id: "2",
            type: "message",
            data: {
              blockType: "message",
              label: "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!"
            },
            position: { x: 250, y: 200 }
          }
        ],
        edges: [
          {
            source: "1",
            target: "2"
          }
        ]
      };

      await api.post(`/api/save_scenario/${newBotName}/`, initialScenario);

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
      console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞...");
      // –í –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
      // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —Ç–æ, —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setNewBotName("");
      setBotToken("");
      setShowTokenInput(false);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      console.log("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤...");
      await fetchBots();

      alert(`–ë–æ—Ç "${newBotName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏). –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.`);
    } catch (error) {
      console.error("–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: " + (error.response?.data?.message || error.message));
    }
  };

  const handleDeleteBot = async (botId) => {
    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ "${botId}"?`)) {
      try {
        // –£–¥–∞–ª—è–µ–º –±–æ—Ç–∞ (—ç—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç —Ç–æ–∫–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ)
        await api.delete(`/api/delete_bot/${botId}/`);
        console.log("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è...");
        await fetchBots();
      } catch (error) {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + (error.response?.data?.message || error.message));
      }
    }
  };

  const handleStartCreate = () => {
    if (!newBotName.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ —Å–Ω–∞—á–∞–ª–∞.");
      return;
    }
    setShowTokenInput(true);
  };

  const handleCancelCreate = () => {
    setShowTokenInput(false);
    setBotToken("");
  };

  const handleImportBot = async () => {
    if (!importFile) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞");
      return;
    }

    try {
      setImportProgress("üìÇ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª...");
      
      const fileText = await importFile.text();
      const importData = JSON.parse(fileText);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      if (!importData.bot_id || !importData.scenario || !importData.token) {
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞");
      }
      
      setImportProgress("üöÄ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞...");
      
      // –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ API –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
      // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±—Ä–∞—É–∑–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
      if (process.env.NODE_ENV === 'development') {
        localStorage.setItem(`botToken_${importData.bot_id}`, importData.token);
        console.log("–¢–æ–∫–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)");
      }
      
      // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const { token, ...safeImportData } = importData;
      
      // Pass user ID as query parameter if user is logged in
      const params = user ? { user_id: user.id } : {};
      const response = await api.post(`/api/import_bot/`, safeImportData, { params });
      
      if (response.data.status === "success") {
        setImportProgress("");
        setShowImportForm(false);
        setImportFile(null);
      
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
        console.log("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞...");
        await fetchBots();
      
        alert(`‚úÖ ${response.data.message}\nüîß –ë–æ—Ç: @${response.data.bot_info?.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n–í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏). –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.`);
      } else {
        throw new Error(response.data.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
      }
      
    } catch (error) {
      setImportProgress("");
      console.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:", error);
      
      let errorMessage = "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ";
      
      if (error.response?.data?.message) {
        errorMessage += error.response.data.message;
      } else if (error.message) {
        errorMessage += error.message;
      } else {
        errorMessage += "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      }
      
      alert(errorMessage);
    }
  };

  const handleExportBot = async (botId) => {
    try {
      // Use our configured API instance instead of direct fetch
      const response = await api.post(`/api/export_bot_zip/${botId}/`);
      
      // Since we're using axios, the response structure is different
      // The actual blob is in response.data
      const blob = new Blob([response.data], { type: 'application/zip' });
      const url = window.URL.createObjectURL(blob);
      
      // Create download link
      const link = document.createElement('a');
      link.href = url;
      link.download = `bot_${botId}_deploy.zip`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      
      alert(`‚úÖ –ë–æ—Ç "${botId}" —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ ZIP-–∞—Ä—Ö–∏–≤`);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:", error);
      alert("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: " + (error.response?.data?.message || error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"));
    }
  };

  const handleCancelImport = () => {
    setShowImportForm(false);
    setImportFile(null);
    setImportProgress("");
  };

  const startRename = (botId) => {
    setRenamingBotId(botId);
    setRenameValue(botId);
  };

  const cancelRename = () => {
    setRenamingBotId(null);
    setRenameValue("");
  };

  const confirmRename = async () => {
    if (!renameValue.trim()) {
      alert("–ù–æ–≤–æ–µ –∏–º—è –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
      return;
    }

    if (renameValue === renamingBotId) {
      cancelRename();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –∏–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –±–æ—Ç–∞–º–∏
    if (bots.includes(renameValue)) {
      alert(`–ë–æ—Ç —Å –∏–º–µ–Ω–µ–º "${renameValue}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
      return;
    }

    try {
      const response = await api.post(`/api/rename_bot/${renamingBotId}/${renameValue}/`);
      if (response.data.status === "success") {
        setRenamingBotId(null);
        setRenameValue("");
        console.log("–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è...");
        await fetchBots();
        alert(response.data.message);
      }
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: " + (error.response?.data?.detail || error.message));
    }
  };

  return (
    <div style={{ padding: "20px", maxWidth: "1200px", margin: "0 auto" }}>
      <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: "20px" }}>
        <h1 style={{ textAlign: "center", margin: 0 }}>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Telegram –±–æ—Ç–æ–≤</h1>
        <div style={{ display: "flex", alignItems: "center", gap: "15px" }}>
          {user && (
            <span style={{ fontWeight: "bold", color: "#333" }}>
              {user.username}
            </span>
          )}
          <button 
            onClick={() => {
              // Clear user data from localStorage
              localStorage.removeItem('user');
              // Redirect to login page
              navigate('/login');
            }}
            style={{ 
              padding: "8px 16px", 
              backgroundColor: "#dc3545", 
              color: "white", 
              border: "none", 
              borderRadius: "4px", 
              cursor: "pointer",
              fontWeight: "bold"
            }}
          >
            –í—ã–π—Ç–∏
          </button>
        </div>
      </div>

      {/* –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞ –¥–ª—è —Ñ–æ—Ä–º */}
      <div style={{ 
        display: "grid", 
        gridTemplateColumns: "repeat(auto-fit, minmax(300px, 1fr))", 
        gap: "20px", 
        marginBottom: "30px" 
      }}>
        {/* –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ */}
        <div style={{ padding: "20px", border: "1px solid #ddd", borderRadius: "8px", backgroundColor: "#f9f9f9" }}>
          <h3>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞</h3>

          <div style={{ marginBottom: "15px" }}>
            <input
              type="text"
              value={newBotName}
              onChange={(e) => setNewBotName(e.target.value)}
              placeholder="–ò–º—è –±–æ—Ç–∞"
              style={{ width: "100%", padding: "8px", border: "1px solid #ccc", borderRadius: "4px" }}
              disabled={showTokenInput}
            />
          </div>

          {showTokenInput && (
            <div style={{ marginBottom: "15px" }}>
              <input
                type="password"
                value={botToken}
                onChange={(e) => setBotToken(e.target.value)}
                placeholder="–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather"
                style={{ width: "100%", padding: "8px", border: "1px solid #ccc", borderRadius: "4px", fontFamily: "monospace" }}
              />
            </div>
          )}

          <div style={{ display: "flex", gap: "10px", flexWrap: "wrap" }}>
            {!showTokenInput ? (
              <button onClick={handleStartCreate} style={{ padding: "10px 15px", backgroundColor: "#007bff", color: "white", border: "none", borderRadius: "4px", cursor: "pointer" }}>
                –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞
              </button>
            ) : (
              <>
                <button onClick={handleCreateBot} style={{ padding: "10px 15px", backgroundColor: "#28a745", color: "white", border: "none", borderRadius: "4px", cursor: "pointer" }}>
                  –°–æ–∑–¥–∞—Ç—å
                </button>
                <button onClick={handleCancelCreate} style={{ padding: "10px 15px", backgroundColor: "#6c757d", color: "white", border: "none", borderRadius: "4px", cursor: "pointer" }}>
                  –û—Ç–º–µ–Ω–∞
                </button>
              </>
            )}
          </div>
        </div>

        {/* –ò–º–ø–æ—Ä—Ç –±–æ—Ç–∞ */}
        <div style={{ padding: "20px", border: "1px solid #ddd", borderRadius: "8px", backgroundColor: "#f0f8ff" }}>
          <h3>üìÇ –ò–º–ø–æ—Ä—Ç –±–æ—Ç–∞</h3>
          
          {!showImportForm ? (
            <div>
              <p style={{ color: "#666", marginBottom: "15px" }}>
                –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–Ω–µ–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
              </p>
              <button 
                onClick={() => setShowImportForm(true)} 
                style={{ 
                  padding: "10px 15px", 
                  backgroundColor: "#17a2b8", 
                  color: "white", 
                  border: "none", 
                  borderRadius: "4px", 
                  cursor: "pointer" 
                }}
              >
                –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
              </button>
            </div>
          ) : (
            <div>
              <input
                type="file"
                accept=".json"
                onChange={(e) => setImportFile(e.target.files[0])}
                style={{ marginBottom: "15px", width: "100%" }}
              />
              
              {importProgress && (
                <p style={{ color: "#17a2b8", marginBottom: "15px" }}>{importProgress}</p>
              )}
              
              <div style={{ display: "flex", gap: "10px", flexWrap: "wrap" }}>
                <button 
                  onClick={handleImportBot}
                  disabled={!importFile || importProgress}
                  style={{ 
                    padding: "10px 15px", 
                    backgroundColor: importProgress ? "#6c757d" : "#28a745", 
                    color: "white", 
                    border: "none", 
                    borderRadius: "4px", 
                    cursor: importProgress ? "not-allowed" : "pointer",
                    opacity: importProgress ? 0.7 : 1
                  }}
                >
                  {importProgress ? "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º..." : "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"}
                </button>
                <button 
                  onClick={handleCancelImport}
                  style={{ 
                    padding: "10px 15px", 
                    backgroundColor: "#6c757d", 
                    color: "white", 
                    border: "none", 
                    borderRadius: "4px", 
                    cursor: "pointer" 
                  }}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ */}
      <div>
        <h2 style={{ marginBottom: "20px" }}>–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤</h2>
        
        {bots.length === 0 ? (
          <p style={{ textAlign: "center", color: "#666" }}>–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞.</p>
        ) : (
          <div style={{ 
            display: "grid", 
            gridTemplateColumns: "repeat(auto-fill, minmax(250px, 1fr))", 
            gap: "20px" 
          }}>
            {bots.map(botId => (
              <div 
                key={botId} 
                style={{ 
                  padding: "15px", 
                  border: "1px solid #ddd", 
                  borderRadius: "8px",
                  display: "flex",
                  flexDirection: "column",
                  gap: "10px"
                }}
              >
                <div style={{ fontWeight: "bold", fontSize: "16px", textAlign: "center" }}>
                  {botId}
                </div>
                
                <div style={{ display: "flex", flexWrap: "wrap", gap: "5px", justifyContent: "center" }}>
                  <button 
                    onClick={() => navigate(`/editor/${botId}`)}
                    style={{ 
                      padding: "8px 12px", 
                      backgroundColor: "#007bff", 
                      color: "white", 
                      border: "none", 
                      borderRadius: "4px", 
                      cursor: "pointer",
                      display: "flex",
                      alignItems: "center",
                      gap: "5px",
                      flex: "1 1 auto",
                      minWidth: "100px",
                      justifyContent: "center"
                    }}
                  >
                    üñäÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä
                  </button>
                  
                  <button 
                    onClick={() => handleExportBot(botId)}
                    style={{ 
                      padding: "8px 12px", 
                      backgroundColor: "#28a745", 
                      color: "white", 
                      border: "none", 
                      borderRadius: "4px", 
                      cursor: "pointer",
                      display: "flex",
                      alignItems: "center",
                      gap: "5px",
                      flex: "1 1 auto",
                      minWidth: "100px",
                      justifyContent: "center"
                    }}
                  >
                    üì§ –≠–∫—Å–ø–æ—Ä—Ç
                  </button>
                  
                  {renamingBotId === botId ? (
                    <div style={{ display: "flex", gap: "5px", width: "100%" }}>
                      <input
                        type="text"
                        value={renameValue}
                        onChange={(e) => setRenameValue(e.target.value)}
                        placeholder="–ù–æ–≤–æ–µ –∏–º—è"
                        style={{ 
                          flex: "1", 
                          padding: "8px", 
                          border: "1px solid #ccc", 
                          borderRadius: "4px",
                          minWidth: "0"
                        }}
                      />
                      <button 
                        onClick={confirmRename}
                        style={{ 
                          padding: "8px 12px", 
                          backgroundColor: "#28a745", 
                          color: "white", 
                          border: "none", 
                          borderRadius: "4px", 
                          cursor: "pointer"
                        }}
                      >
                        ‚úì
                      </button>
                      <button 
                        onClick={cancelRename}
                        style={{ 
                          padding: "8px 12px", 
                          backgroundColor: "#6c757d", 
                          color: "white", 
                          border: "none", 
                          borderRadius: "4px", 
                          cursor: "pointer"
                        }}
                      >
                        ‚úï
                      </button>
                    </div>
                  ) : (
                    <button 
                      onClick={() => startRename(botId)}
                      style={{ 
                        padding: "8px 12px", 
                        backgroundColor: "#ffc107", 
                        color: "black", 
                        border: "none", 
                        borderRadius: "4px", 
                        cursor: "pointer",
                        display: "flex",
                        alignItems: "center",
                        gap: "5px",
                        flex: "1 1 auto",
                        minWidth: "100px",
                        justifyContent: "center"
                      }}
                    >
                      üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
                    </button>
                  )}
                  
                  <button 
                    onClick={() => handleDeleteBot(botId)}
                    style={{ 
                      padding: "8px 12px", 
                      backgroundColor: "#dc3545", 
                      color: "white", 
                      border: "none", 
                      borderRadius: "4px", 
                      cursor: "pointer",
                      display: "flex",
                      alignItems: "center",
                      gap: "5px",
                      flex: "1 1 auto",
                      minWidth: "100px",
                      justifyContent: "center"
                    }}
                  >
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default BotList;