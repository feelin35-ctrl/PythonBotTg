#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–ø–ª–æ–π–º–µ–Ω—Ç –±–æ—Ç–∞ "–æ–æ121211122112" –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
"""

import os
import sys
import logging
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.scenario_runner import ScenarioRunner
from core.block_registry import block_registry
import telebot
import time
import threading
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞
        load_dotenv()
        bot_token = os.getenv("BOT_TOKEN")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ .env, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤
        if not bot_token:
            tokens_path = "bot_tokens.json"
            if not os.path.exists(tokens_path):
                logger.error("–§–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            with open(tokens_path, "r", encoding="utf-8") as f:
                tokens = json.load(f)
            
            bot_token = tokens.get("–æ–æ121211122112")
            if not bot_token:
                logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario_path = f"bots/bot_–æ–æ121211122112.json"
        if not os.path.exists(scenario_path):
            logger.error("–§–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(scenario_path, "r", encoding="utf-8") as f:
            scenario_data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏—è
        scenario_runner = ScenarioRunner(scenario_data)
        if not scenario_runner.nodes_map:
            logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = telebot.TeleBot(bot_token)
        bot_info = bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username}")
        
        @bot.message_handler(commands=['start', 'help'])
        def handle_start(message):
            try:
                logger.info(f"üë§ /start –æ—Ç {message.chat.id} - {message.from_user.username}")
                
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª
                start_node = next((node_id for node_id, block in scenario_runner.nodes_map.items()
                                   if hasattr(block, 'type') and block.type == 'start'), None)
                if start_node:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    next_node_id = scenario_runner.process_node(bot, message.chat.id, start_node)
                    while next_node_id:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞
                        next_block = scenario_runner.nodes_map.get(next_node_id)
                        if next_block and hasattr(next_block, 'type'):
                            # –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                            if next_block.type in ['button', 'inline_button', 'input', 'menu']:
                                scenario_runner.process_node(bot, message.chat.id, next_node_id)
                                break
                            else:
                                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤
                                scenario_runner.process_node(bot, message.chat.id, next_node_id)
                                next_node_id = scenario_runner.get_next_node_id(next_node_id)
                        else:
                            scenario_runner.process_node(bot, message.chat.id, next_node_id)
                            next_node_id = scenario_runner.get_next_node_id(next_node_id)
                else:
                    bot.send_message(message.chat.id, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤ (–∫–Ω–æ–ø–∫–∏, inline-–∫–Ω–æ–ø–∫–∏ –∏ —Ç.–¥.)
        # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        bot.polling(none_stop=True)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    run_bot()
