from .base_block import BaseBlock
import telebot
from typing import Dict, Any, Optional
import logging
import os

logger = logging.getLogger(__name__)


class FileBlock(BaseBlock):

    @staticmethod
    def get_block_type() -> str:
        return "file"

    def execute(self, bot: telebot.TeleBot, chat_id: int, **kwargs) -> Optional[str]:
        files = self.node_data.get('data', {}).get('files', [])
        caption = self.node_data.get('data', {}).get('caption', '')
        
        if not files:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            if caption:
                bot.send_message(chat_id, caption)
            return None

        try:
            for file_info in files:
                file_path = file_info.get('path', '').strip()
                file_name = file_info.get('name', '').strip()
                
                if not file_path:
                    logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_info}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if not os.path.exists(file_path):
                    logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                    bot.send_message(chat_id, f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_name or file_path}")
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                file_extension = os.path.splitext(file_path)[1].lower()
                
                try:
                    with open(file_path, 'rb') as file:
                        if file_extension in ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp']:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                            bot.send_photo(
                                chat_id, 
                                file, 
                                caption=caption if len(files) == 1 else f"{caption}\nüì∑ {file_name}" if caption else f"üì∑ {file_name}"
                            )
                        elif file_extension in ['.mp4', '.avi', '.mkv', '.mov', '.webm']:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ
                            bot.send_video(
                                chat_id, 
                                file, 
                                caption=caption if len(files) == 1 else f"{caption}\nüé• {file_name}" if caption else f"üé• {file_name}"
                            )
                        elif file_extension in ['.mp3', '.wav', '.ogg', '.m4a', '.flac']:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∞—É–¥–∏–æ
                            bot.send_audio(
                                chat_id, 
                                file, 
                                caption=caption if len(files) == 1 else f"{caption}\nüéµ {file_name}" if caption else f"üéµ {file_name}"
                            )
                        else:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                            bot.send_document(
                                chat_id, 
                                file, 
                                caption=caption if len(files) == 1 else f"{caption}\nüìÑ {file_name}" if caption else f"üìÑ {file_name}"
                            )
                        
                        logger.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {file_name or file_path}")
                        
                except Exception as file_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {file_error}")
                    bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {file_name or file_path}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –±–ª–æ–∫–∞: {e}")
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã ScenarioRunner —Å–∞–º –Ω–∞—à–µ–ª —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª
        return None