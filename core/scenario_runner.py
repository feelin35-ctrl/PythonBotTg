from typing import Dict, List, Optional
import telebot
from .block_registry import block_registry
import logging

logger = logging.getLogger(__name__)


class ScenarioRunner:
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ Telegram –±–æ—Ç–∞"""

    def __init__(self, scenario_data: Dict):
        self.scenario_data = scenario_data
        self.nodes_map = self._create_nodes_map()

    def _create_nodes_map(self) -> Dict[str, any]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É —É–∑–ª–æ–≤ —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –±–ª–æ–∫–æ–≤"""
        nodes_map = {}
        for node in self.scenario_data.get('nodes', []):
            try:
                block = block_registry.create_block_instance(node)
                nodes_map[node['id']] = block
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞ {node.get('id')}: {e}")
        return nodes_map

    def get_next_node_id(self, current_node_id: str, handle_id: Optional[str] = None) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤—è–∑–µ–π (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏)"""
        edges = self.scenario_data.get('edges', [])
        logger.info(f"üîç –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –¥–ª—è {current_node_id}, handle: {handle_id}")

        for edge in edges:
            if edge.get('source') == current_node_id:
                if handle_id is None or edge.get('sourceHandle') == handle_id:
                    target = edge.get('target')
                    logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {target}")
                    return target
        logger.info("   ‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None

    def process_node(self, bot: telebot.TeleBot, chat_id: int, node_id: str, **kwargs) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —É–∑–µ–ª"""
        block = self.nodes_map.get(node_id)
        if not block:
            logger.error(f"‚ùå –£–∑–µ–ª {node_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        try:
            logger.info(f"üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∑–µ–ª {node_id} —Ç–∏–ø–∞ {block.type}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫
            next_node_id = block.execute(bot, chat_id, **kwargs)

            # –ï—Å–ª–∏ –±–ª–æ–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª, –∏—â–µ–º –µ–≥–æ –ø–æ —Å–≤—è–∑—è–º
            if next_node_id is None:
                next_node_id = self.get_next_node_id(node_id)

            if next_node_id:
                logger.info(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–∑–ª—É {next_node_id}")
                return next_node_id
            else:
                logger.info("‚èπÔ∏è –ö–æ–Ω–µ—Ü —Ü–µ–ø–æ—á–∫–∏")
                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–∑–ª–µ {node_id}: {e}")
            try:
                bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ üòî")
            except:
                pass
            return None

    def handle_inline_button_press(self, bot: telebot.TeleBot, call, node_id: str, callback_data: str) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–∫–∏"""
        block = self.nodes_map.get(node_id)
        if not block or not hasattr(block, 'type') or block.type != 'inline_button':
            return None

        try:
            # –û—Ç–≤–µ—Ç–∏–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
            bot.answer_callback_query(call.id)

            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏
            next_node_id = block.get_next_node_id_for_button(
                callback_data,
                self.scenario_data.get('edges', [])
            )

            if next_node_id:
                logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ inline-–∫–Ω–æ–ø–∫–∞ {callback_data}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ {next_node_id}")
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                try:
                    bot.edit_message_reply_markup(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        reply_markup=None
                    )
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

                return self.process_node(bot, call.message.chat.id, next_node_id)
            else:
                bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä!")
                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline-–∫–Ω–æ–ø–∫–∏: {e}")
            return None

    def handle_button_press(self, bot: telebot.TeleBot, chat_id: int, node_id: str, button_index: int) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏"""
        block = self.nodes_map.get(node_id)
        if not block or not hasattr(block, 'type') or block.type != 'button':
            return None

        try:
            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏
            next_node_id = self.get_next_node_id(node_id, str(button_index))

            if next_node_id:
                logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {button_index}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ {next_node_id}")
                return self.process_node(bot, chat_id, next_node_id)
            else:
                bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä!")
                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
            return None