"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è main.py —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ DELETE –∏ OPTIONS
"""

from fastapi import FastAPI, HTTPException, Request, Query

from fastapi.responses import FileResponse, JSONResponse
from pydantic import BaseModel
from typing import List, Optional, Dict
import os, json, time, zipfile, tempfile, shutil, datetime
import telebot
import threading
import uvicorn
import logging

import logging
import logging

# –ò–º–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
from bot_structure_utils import (
    get_bot_directory,
    get_bot_scenario_file,
    get_bot_config_file,
    get_bot_media_directory,
    get_bot_logs_directory,
    get_bot_backups_directory,
    get_bot_temp_directory,
    create_bot_config as create_user_bot_config,
    update_bot_config,
    save_bot_scenario as save_user_bot_scenario,
    load_bot_scenario as load_user_bot_scenario,
    list_user_bots,
    bot_directory_exists,
    initialize_bot_structure
)

import requests
import hashlib
import hmac
import base64
from cryptography.fernet import Fernet
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–ª–æ–∫–æ–≤
from core.block_registry import block_registry
from core.scenario_runner import ScenarioRunner

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = FastAPI()

# –î–æ–±–∞–≤–∏–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    logger.info(f"üì• Incoming request: {request.method} {request.url}")
    start_time = time.time()
    
    try:
        response = await call_next(request)
        process_time = time.time() - start_time
        logger.info(f"üì§ Response status: {response.status_code} for {request.method} {request.url} - Time: {process_time:.2f}s")
        return response
    except Exception as e:
        process_time = time.time() - start_time
        logger.error(f"‚ùå Error processing request {request.method} {request.url} - Time: {process_time:.2f}s - Error: {e}")
        raise

# ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–∞
# –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import os
allowed_origins = [
    "http://localhost:3001", 
    "http://127.0.0.1:3001", 
    "http://localhost:3000", 
    "http://127.0.0.1:3000", 
    "http://localhost:3002", 
    "http://127.0.0.1:3002", 
    "http://localhost:3003", 
    "http://127.0.0.1:3003", 
    "http://45.150.9.70:8001",
    "http://45.150.9.70",  # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –±–µ–∑ –ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    "https://your-frontend-domain.com"  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥–æ–º–µ–Ω –≤–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
]

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ origins –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
additional_origins = os.getenv("ALLOWED_ORIGINS", "")
if additional_origins:
    allowed_origins.extend(additional_origins.split(","))

from fastapi.middleware.cors import CORSMiddleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    allow_origin_regex=None,
    expose_headers=[],
    max_age=600,
)

# ========== –ú–û–î–ï–õ–ò ==========
class ButtonData(BaseModel):
    label: str

# –î–æ–±–∞–≤–∏–º –º–æ–¥–µ–ª–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
class RegisterUserRequest(BaseModel):
    username: str
    email: str
    password: str

class LoginUserRequest(BaseModel):
    username: str
    password: str

class SaveTokenRequest(BaseModel):
    user_id: str
    bot_id: str
    token: str

class UserTokenResponse(BaseModel):
    token: str

class BotDataRequest(BaseModel):
    token: Optional[str] = None

class NodeData(BaseModel):
    label: Optional[str] = None
    url: Optional[str] = None
    images: Optional[List[str]] = None
    buttons: Optional[List[ButtonData]] = None
    condition: Optional[str] = None
    variableName: Optional[str] = None
    method: Optional[str] = None
    payload: Optional[str] = None
    target_node: Optional[str] = None
    onChange: Optional[object] = None
    blockType: Optional[str] = None
    buttonLayout: Optional[str] = None  # –î–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    buttonsPerRow: Optional[int] = None  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É (1-8)
    hideKeyboard: Optional[bool] = None  # –î–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è keyword_processor –±–ª–æ–∫–∞
    keywords: Optional[List[str]] = None
    caseSensitive: Optional[bool] = None
    matchMode: Optional[str] = None

class Node(BaseModel):
    id: str
    type: Optional[str] = None
    data: NodeData
    position: Dict

class Edge(BaseModel):
    id: Optional[str] = None
    source: str
    target: str
    sourceHandle: Optional[str] = None

class Scenario(BaseModel):
    nodes: List[Node]
    edges: List[Edge]
    admin_chat_id: Optional[str] = None
    
    class Config:
        # Allow both snake_case and camelCase field names
        @staticmethod
        def alias_generator(field_name: str) -> str:
            # Convert snake_case to camelCase
            components = field_name.split('_')
            return components[0] + ''.join(word.capitalize() for word in components[1:])
        
        populate_by_name = True
        
        # Allow both admin_chat_id and adminChatId
        json_schema_extra = {
            "examples": [
                {
                    "admin_chat_id": "123456789",
                    "adminChatId": "123456789"
                }
            ]
        }


class BotImportData(BaseModel):
    bot_id: str
    scenario: Scenario
    token: str

class TokenData(BaseModel):
    token: str

class AuthData(BaseModel):
    password: str

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
BOTS_DIR = "bots"
os.makedirs(BOTS_DIR, exist_ok=True)

# –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")

def authenticate_admin(password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not ADMIN_PASSWORD:
        logger.warning("–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ADMIN_PASSWORD –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return True  # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –±–µ–∑ –ø–∞—Ä–æ–ª—è
    
    return password == ADMIN_PASSWORD

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏
running_bots = {}
bot_stop_flags = {}
bot_restart_counter = {}  # –°—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω –ø–æ—Ç–æ–∫–æ–≤
chat_history = {}  # –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞

def load_tokens():
    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–∫–µ–Ω—ã —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    return {}

def save_tokens(tokens):
    # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    # –í—Å–µ —Ç–æ–∫–µ–Ω—ã —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    pass

    pass

def bot_file(bot_id: str, user_id: Optional[str] = None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–æ—Ç–∞. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id, —Å–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print(f"bot_file –≤—ã–∑–≤–∞–Ω–∞ —Å bot_id={bot_id}, user_id={user_id}")
    
    if user_id:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —á–µ—Ä–µ–∑ bot_structure_utils
        from bot_structure_utils import get_bot_scenario_file
        path = get_bot_scenario_file(user_id, bot_id)
        print(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–æ—Ç–∞ —Å user_id: {path}")
        return path
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ø–∞–ø–∫—É –¥–ª—è –±–æ—Ç–æ–≤ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        path = os.path.join(BOTS_DIR, f"bot_{bot_id}.json")
        print(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–æ—Ç–∞ –±–µ–∑ user_id: {path}")
        return path

def load_scenario(bot_id: str, user_id: Optional[str] = None) -> Scenario:
    # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
    if not user_id:
        from core.models import UserManager
        user_manager = UserManager()
        user_id = user_manager.get_bot_owner(bot_id)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –ø—É—Ç—å —Å user_id
    if user_id:
        file_path = bot_file(bot_id, user_id)
        print(f"Trying to load scenario from user-specific path: {file_path}")
        print(f"File exists: {os.path.exists(file_path)}")
        
        if os.path.exists(file_path):
            try:
                print("Opening scenario file...")
                with open(file_path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    print(f"Data from file: {data}")
                    print(f"Number of nodes in data: {len(data.get('nodes', []))}")
                    return Scenario(**data)
            except Exception as e:
                logger.error(f"Error loading scenario {bot_id} from user path: {e}")
                import traceback
                traceback.print_exc()
        else:
            print(f"Scenario file not found: {file_path}")
    else:
        print(f"User ID not found for bot {bot_id}")
    
    # Return empty scenario if nothing found
    return Scenario(nodes=[], edges=[])

def save_scenario(bot_id: str, scenario: Scenario, user_id: Optional[str] = None):
    # –ï—Å–ª–∏ user_id –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not user_id:
        try:
            from core.models import UserManager
            user_manager = UserManager()
            user_id = user_manager.get_bot_owner(bot_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ {bot_id}: {e}")
    
    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    if not user_id:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ {bot_id} –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è")
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ {bot_id}")
    
    try:
        file_path = bot_file(bot_id, user_id)
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(scenario.dict(), f, ensure_ascii=False, indent=2)
        logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è {bot_id}: {e}")
        raise

# ========== API –≠–ù–î–ü–û–ò–ù–¢–´ ==========
@app.get("/")
def read_root():
    return {"message": "Telegram Bot Constructor API"}

def validate_telegram_token(token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ Telegram"""
    if not token:
        return False
    if ":" not in token:
        return False
    parts = token.split(":")
    if len(parts) != 2:
        return False
    if not parts[0].isdigit() or len(parts[0]) < 5:
        return False
    if len(parts[1]) < 20:
        return False
    return True

def check_token_sync(token: str) -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram"""
    try:
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: {'*' * len(token)}")  # –°–∫—Ä—ã–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
        is_valid_format = validate_telegram_token(token)
        print(f"–§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {is_valid_format}")
        
        if not is_valid_format:
            print(f"–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∞")
            return False

        print("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º...")
        test_bot = telebot.TeleBot(token)
        bot_info = test_bot.get_me()
        print(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: {bot_info}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def check_telegram_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
    try:
        response = requests.get('https://api.telegram.org', timeout=10)
        return response.status_code == 200
    except:
        return False

def add_to_chat_history(chat_id: int, node_id: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —É–∑–µ–ª –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    if chat_id not in chat_history:
        chat_history[chat_id] = []
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —à–∞–≥–æ–≤)
    if len(chat_history[chat_id]) >= 10:
        chat_history[chat_id].pop(0)
    
    # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —É–∑–ª—ã –ø–æ–¥—Ä—è–¥
    if not chat_history[chat_id] or chat_history[chat_id][-1] != node_id:
        chat_history[chat_id].append(node_id)
        logger.info(f"üó∫Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é {chat_id}: {node_id}")

def get_previous_node(chat_id: int) -> Optional[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É–∑–µ–ª –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    if chat_id not in chat_history or len(chat_history[chat_id]) < 2:
        return None
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
    chat_history[chat_id].pop()  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π
    previous_node = chat_history[chat_id][-1]  # –ë–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
    logger.info(f"‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –∫ —É–∑–ª—É {previous_node} –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    return previous_node

def clear_chat_history(chat_id: int):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    if chat_id in chat_history:
        del chat_history[chat_id]
        logger.info(f"üßΩ –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ {chat_id}")

def start_telegram_bot(token: str, scenario_data: dict, bot_id: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ {bot_id} —Å —Ç–æ–∫–µ–Ω–æ–º: {'*' * 10}...")  # –°–∫—Ä—ã–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    bot_stop_flags[bot_id] = False

    max_retries = 3
    retry_delay = 15

    for attempt in range(max_retries):
        try:
            if bot_stop_flags.get(bot_id, True):
                logger.info(f"‚èπÔ∏è –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            test_bot = telebot.TeleBot(token)
            bot_info = test_bot.get_me()
            logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –≤–µ—Ä–Ω—ã–π. –ë–æ—Ç: @{bot_info.username}")

            # –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏—è
            scenario_runner = ScenarioRunner(scenario_data)
            if not scenario_runner.nodes_map:
                logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏!")
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –±–æ—Ç–∞
            bot = telebot.TeleBot(token)
                
            logger.info(f"ü§ñ –ë–æ—Ç @{bot_info.username} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            running_bots[f"{bot_id}_instance"] = bot

            @bot.message_handler(commands=['start', 'help'])
            def handle_start(message):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    if bot_stop_flags.get(bot_id, True):
                        logger.info(f"‚èπÔ∏è –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º /start")
                        return
                        
                    logger.info(f"üë§ /start –æ—Ç {message.chat.id} - {message.from_user.username}")
                    
                    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –Ω–æ–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
                    clear_chat_history(message.chat.id)
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª
                    start_node = next((node_id for node_id, block in scenario_runner.nodes_map.items()
                                       if hasattr(block, 'type') and block.type == 'start'), None)
                    if start_node:
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª –≤ –∏—Å—Ç–æ—Ä–∏—é
                        add_to_chat_history(message.chat.id, start_node)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        next_node_id = scenario_runner.process_node(bot, message.chat.id, start_node)
                        while next_node_id:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞
                            next_block = scenario_runner.nodes_map.get(next_node_id)
                            if next_block and hasattr(next_block, 'type'):
                                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –≤ –∏—Å—Ç–æ—Ä–∏—é
                                add_to_chat_history(message.chat.id, next_node_id)
                                
                                # –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                                if next_block.type in ['button', 'inline_button', 'input', 'menu']:
                                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —É–∑–µ–ª –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                                    scenario_runner.process_node(bot, message.chat.id, next_node_id)
                                    break
                                else:
                                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤ (message, image, condition, etc.)
                                    # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª
                                    scenario_runner.process_node(bot, message.chat.id, next_node_id)
                                    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –ø–æ —Å–≤—è–∑—è–º
                                    next_node_id = scenario_runner.get_next_node_id(next_node_id)
                            else:
                                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –±–ª–æ–∫
                                add_to_chat_history(message.chat.id, next_node_id)
                                scenario_runner.process_node(bot, message.chat.id, next_node_id)
                                next_node_id = scenario_runner.get_next_node_id(next_node_id)
                    else:
                        bot.send_message(message.chat.id, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ù–∞–∑–∞–¥"
            @bot.message_handler(func=lambda message: message.text and message.text.lower() in ['/–Ω–∞–∑–∞–¥', '/back', '–Ω–∞–∑–∞–¥', 'back'])
            def handle_back_command(message):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    if bot_stop_flags.get(bot_id, True):
                        logger.info(f"‚èπÔ∏è –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –ù–∞–∑–∞–¥")
                        return
                        
                    logger.info(f"‚Ü©Ô∏è –ö–æ–º–∞–Ω–¥–∞ '–ù–∞–∑–∞–¥' –æ—Ç {message.chat.id}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É–∑–µ–ª
                    previous_node_id = get_previous_node(message.chat.id)
                    
                    if previous_node_id:
                        logger.info(f"‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–∑–ª—É {previous_node_id}")
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É–∑–µ–ª
                        scenario_runner.process_node(bot, message.chat.id, previous_node_id)
                    else:
                        bot.send_message(message.chat.id, "‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ù–∞–∑–∞–¥: {e}")

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é
            @bot.message_handler(func=lambda message: message.text and message.text.startswith('/') and message.text not in ['/start', '/help', '/–Ω–∞–∑–∞–¥', '/back'])
            def handle_menu_commands(message):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    if bot_stop_flags.get(bot_id, True):
                        logger.info(f"‚èπÔ∏è –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É")
                        return
                        
                    command = message.text.strip()
                    logger.info(f"üìã –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é –æ—Ç {message.chat.id}: {command}")
                    
                    # –ò—â–µ–º –±–ª–æ–∫ –º–µ–Ω—é —Å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π
                    for node_id, block in scenario_runner.nodes_map.items():
                        if hasattr(block, 'type') and block.type == 'menu':
                            menu_items = block.node_data.get('data', {}).get('menuItems', [])
                            for item in menu_items:
                                item_command = item.get('command', '').strip()
                                if item_command:
                                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                                    if not item_command.startswith('/'):
                                        item_command = f"/{item_command}"
                                    
                                    if item_command == command:
                                        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {command}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É")
                                        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –ø–æ—Å–ª–µ –º–µ–Ω—é
                                        next_node_id = scenario_runner.get_next_node_id(node_id)
                                        if next_node_id:
                                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                                            add_to_chat_history(message.chat.id, next_node_id)
                                            scenario_runner.process_node(bot, message.chat.id, next_node_id)
                                        else:
                                            bot.send_message(message.chat.id, f"–ö–æ–º–∞–Ω–¥–∞ {command} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                                        return
                    
                    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                    bot.send_message(message.chat.id, f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {command}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (inline-–∫–Ω–æ–ø–∫–∏)
            @bot.callback_query_handler(func=lambda call: True)
            def handle_callback_query(call):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    if bot_stop_flags.get(bot_id, True):
                        logger.info(f"‚èπÔ∏è –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º callback")
                        bot.answer_callback_query(call.id, text="–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        return
                        
                    logger.info(f"üîò Callback –æ—Ç {call.from_user.id}: {call.data}")

                    # –ò—â–µ–º –±–ª–æ–∫ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç callback_data
                    for node_id, block in scenario_runner.nodes_map.items():
                        if hasattr(block, 'type') and block.type == 'inline_button':
                            buttons = block.node_data.get('data', {}).get('buttons', [])
                            for button in buttons:
                                callback_data = button.get('callbackData',
                                                           f"btn_{hash(button.get('label', '')) % 10000}")
                                if callback_data == call.data:
                                    scenario_runner.handle_inline_button_press(bot, call, node_id, call.data)
                                    return

                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É
                    bot.answer_callback_query(call.id, text="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
                    try:
                        bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                    except:
                        pass

            @bot.message_handler(func=lambda message: True)
            def handle_all_messages(message):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    if bot_stop_flags.get(bot_id, True):
                        logger.info(f"‚èπÔ∏è –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                        return
                        
                    logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.chat.id}: {message.text}")

                    # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    message_context = {
                        'user_message': message.text,
                        'user_id': message.from_user.id,
                        'username': message.from_user.username
                    }

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    keyword_processed = False
                    for node_id, block in scenario_runner.nodes_map.items():
                        if hasattr(block, 'type') and block.type == 'keyword_processor':
                            logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é keyword_processor: {message.text}")
                            # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫ keyword_processor —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                            success = block.process(bot, message.chat.id, message.text)
                            if success:
                                keyword_processed = True
                                # –ï—Å–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
                                # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–≤—è–∑–∏
                                next_node_id = scenario_runner.get_next_node_id(node_id)
                                if next_node_id:
                                    scenario_runner.process_node(bot, message.chat.id, next_node_id, **message_context)
                                break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–ª–æ–∫–æ–º keyword_processor, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    if keyword_processed:
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
                    for node_id, block in scenario_runner.nodes_map.items():
                        if hasattr(block, 'type') and block.type == 'button':
                            buttons = block.node_data.get('data', {}).get('buttons', [])
                            hide_keyboard = block.node_data.get('data', {}).get('hideKeyboard', False)
                            
                            # –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
                            if hide_keyboard and message.text.isdigit():
                                button_index = int(message.text) - 1  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç 1-based –∏–Ω–¥–µ–∫—Å

                                if 0 <= button_index < len(buttons):
                                    logger.info(f"üîò –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç {message.text} (–∏–Ω–¥–µ–∫—Å {button_index})")
                                    result = scenario_runner.handle_button_press(bot, message.chat.id, node_id, button_index)
                                    if result:
                                        return
                            
                            # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏ (–¥–ª—è –Ω–µ —Å–∫—Ä—ã—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫)
                            for index, button in enumerate(buttons):
                                if button.get('label') == message.text:
                                    logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {message.text}")
                                    result = scenario_runner.handle_button_press(bot, message.chat.id, node_id, index)
                                    if result:
                                        return
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å —Å–∫—Ä—ã—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                        elif hasattr(block, 'type') and block.type == 'inline_button':
                            buttons = block.node_data.get('data', {}).get('buttons', [])
                            hide_keyboard = block.node_data.get('data', {}).get('hideKeyboard', False)
                            
                            # –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
                            if hide_keyboard and message.text.isdigit():
                                button_index = int(message.text) - 1  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç 1-based –∏–Ω–¥–µ–∫—Å
                                if 0 <= button_index < len(buttons):
                                    logger.info(f"üîò –í—ã–±—Ä–∞–Ω inline-–≤–∞—Ä–∏–∞–Ω—Ç {message.text} (–∏–Ω–¥–µ–∫—Å {button_index})")
                                    # –î–ª—è inline-–∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–∏—Ç–∞—Ü–∏—é callback_data
                                    callback_data = f"btn_{button_index}"
                                    result = scenario_runner.handle_inline_button_press(bot, message, node_id, callback_data)
                                    if result:
                                        return

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
                        elif hasattr(block, 'type') and block.type == 'nlp_response':
                            logger.info(f"üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é NLP: {message.text}")
                            # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫ NLP —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                            result = scenario_runner.process_node(bot, message.chat.id, node_id, **message_context)
                            if result:
                                return

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                        elif hasattr(block, 'type') and block.type == 'schedule':
                            logger.info(f"üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –±–ª–æ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {message.text}")
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                            result = scenario_runner.handle_schedule_response(bot, message.chat.id, node_id, message.text)
                            # –ï—Å–ª–∏ handle_schedule_response –≤–µ—Ä–Ω—É–ª –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ None), —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, 
                            # —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
                            # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª None, —ç—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
                            return  # This should prevent the default message from being sent

                    # –ï—Å–ª–∏ –Ω–µ –∫–Ω–æ–ø–∫–∞ –∏ –Ω–µ—Ç NLP –±–ª–æ–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
                    bot.send_message(message.chat.id, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    try:
                        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    except:
                        pass

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            logger.info("üì° –ó–∞–ø—É—Å–∫–∞–µ–º polling...")

            while not bot_stop_flags.get(bot_id, True):
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ü–∏–∫–ª—ã polling –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    bot.polling(
                        none_stop=False,  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞
                        interval=1,       # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                        timeout=5,        # –ö–æ—Ä–æ—Ç–∫–∏–π timeout
                        long_polling_timeout=5  # –ö–æ—Ä–æ—Ç–∫–∏–π long polling
                    )
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞
                    if bot_stop_flags.get(bot_id, True):
                        logger.info(f"üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                        break
                        
                except Exception as e:
                    if bot_stop_flags.get(bot_id, True):
                        logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —Ñ–ª–∞–≥—É –≤ except –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                        break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                    if "409" in str(e) and "getUpdates" in str(e):
                        logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç getUpdates –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
                        logger.info(f"üîÑ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        time.sleep(5)
                    else:
                        logger.error(f"üî• –û—à–∏–±–∫–∞ polling: {e}")
                        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
                        time.sleep(3)

            logger.info(f"‚èπÔ∏è –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –û—á–∏—â–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            bot_instance_key = f"{bot_id}_instance"
            if bot_instance_key in running_bots:
                del running_bots[bot_instance_key]
                logger.info(f"üóëÔ∏è –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ {bot_id} –æ—á–∏—â–µ–Ω")
            
            break

        except Exception as e:
            if "Unauthorized" in str(e):
                logger.error("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
                break
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
            time.sleep(retry_delay)

# ========== –ü–†–ê–í–ò–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò DELETE –ò OPTIONS ==========
@app.options("/api/delete_bot/{bot_id}/")
async def delete_bot_options(bot_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
    response = JSONResponse({"status": "success"})
    response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
    response.headers["Access-Control-Allow-Credentials"] = "true"
    response.headers["Access-Control-Allow-Methods"] = "DELETE, OPTIONS"
    response.headers["Access-Control-Allow-Headers"] = "*"
    response.headers["Access-Control-Max-Age"] = "600"
    return response

@app.delete("/api/delete_bot/{bot_id}/")
def delete_bot(bot_id: str, deleted_by_user_id: Optional[str] = None):
    try:
        print(f"=== DELETE BOT REQUEST ===")
        print(f"bot_id: {bot_id}")
        print(f"deleted_by_user_id: {deleted_by_user_id}")
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω deleted_by_user_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º
        is_super_admin = False
        if deleted_by_user_id:
            try:
                from core.models import UserManager
                user_manager = UserManager()
                is_super_admin = user_manager.is_super_admin(deleted_by_user_id)
                print(f"is_super_admin: {is_super_admin}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {deleted_by_user_id}: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
        from core.models import UserManager
        user_manager = UserManager()
        owner_id = user_manager.get_bot_owner(bot_id)
        print(f"owner_id: {owner_id}")
        
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        if not owner_id:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ {bot_id}")
            response_data = {"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ {bot_id}"}
            # Add CORS headers
            response = JSONResponse(response_data)
            response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
            response.headers["Access-Control-Allow-Credentials"] = "true"
            response.headers["Access-Control-Allow-Methods"] = "DELETE, OPTIONS"
            response.headers["Access-Control-Allow-Headers"] = "*"
            return response
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞
        if not is_super_admin and deleted_by_user_id != owner_id:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {deleted_by_user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ {bot_id}")
            response_data = {"status": "error", "message": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞"}
            # Add CORS headers
            response = JSONResponse(response_data)
            response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
            response.headers["Access-Control-Allow-Credentials"] = "true"
            response.headers["Access-Control-Allow-Methods"] = "DELETE, OPTIONS"
            response.headers["Access-Control-Allow-Headers"] = "*"
            return response
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        file_path = bot_file(bot_id, owner_id)
        print(f"Attempting to delete bot file: {file_path}")
        print(f"File exists: {os.path.exists(file_path)}")
        
        if os.path.exists(file_path):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±–æ—Ç–∞ –∏ —É–¥–∞–ª—è–µ–º –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            bot_dir = os.path.dirname(file_path)
            if os.path.exists(bot_dir):
                import shutil
                shutil.rmtree(bot_dir)
                logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–æ—Ç–∞ {bot_dir} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            else:
                # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏—è
                os.remove(file_path)
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                from core.models import UserManager
                user_manager = UserManager()
                deletion_result = user_manager.delete_user_token(owner_id, bot_id)
                if deletion_result:
                    logger.info(f"–¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                else:
                    logger.warning(f"–¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id} –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
            if bot_id in running_bots:
                bot_stop_flags[bot_id] = True
                del running_bots[bot_id]

            # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ—Ç–∞ {bot_id}")
                deletion_result = user_manager.delete_bot_ownership(bot_id)
                if deletion_result:
                    logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ—Ç–∞ {bot_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                else:
                    logger.warning(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ—Ç–∞ {bot_id} –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ—Ç–∞ {bot_id}: {e}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")

            response_data = {"status": "success", "message": f"–ë–æ—Ç {bot_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."}
            # Add CORS headers
            response = JSONResponse(response_data)
            response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
            response.headers["Access-Control-Allow-Credentials"] = "true"
            response.headers["Access-Control-Allow-Methods"] = "DELETE, OPTIONS"
            response.headers["Access-Control-Allow-Headers"] = "*"
            return response
        else:
            response_data = {"status": "success", "message": f"–ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω."}
            # Add CORS headers
            response = JSONResponse(response_data)
            response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
            response.headers["Access-Control-Allow-Credentials"] = "true"
            response.headers["Access-Control-Allow-Methods"] = "DELETE, OPTIONS"
            response.headers["Access-Control-Allow-Headers"] = "*"
            return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ {bot_id}: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        response_data = {"status": "error", "message": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞: {str(e)}"}
        # Add CORS headers
        response = JSONResponse(response_data)
        response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
        response.headers["Access-Control-Allow-Credentials"] = "true"
        response.headers["Access-Control-Allow-Methods"] = "DELETE, OPTIONS"
        response.headers["Access-Control-Allow-Headers"] = "*"
        return response

# ========== –û–°–¢–ê–õ–¨–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ ==========
@app.post("/api/import_bot/")
def import_bot(import_data: BotImportData, user_id: Optional[str] = None):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        bot_id = import_data.bot_id.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ bot_id –Ω–µ –ø—É—Å—Ç–æ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        if not bot_id:
            return {"status": "error", "message": "ID –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(bot_file(bot_id)):
            return {"status": "error", "message": f"–ë–æ—Ç —Å ID '{bot_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        token = import_data.token.strip()
        if not token:
            return {"status": "error", "message": "–¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}
        
        if not validate_telegram_token(token):
            return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
        try:
            test_bot = telebot.TeleBot(token)
            bot_info = test_bot.get_me()
            logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤–µ—Ä–Ω—ã–π. –ë–æ—Ç: @{bot_info.username}")
        except Exception as e:
            return {"status": "error", "message": f"–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {str(e)}"}
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = import_data.scenario
        if not scenario.nodes:
            return {"status": "error", "message": "–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —É–∑–ª–∞
        has_start_node = any(node.data.blockType == 'start' for node in scenario.nodes)
        if not has_start_node:
            return {"status": "error", "message": "–°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª"}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        logger.info(f"üíæ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –±–æ—Ç–∞ {bot_id}")
        save_scenario(bot_id, scenario)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"üîë –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id}")
        if user_id:
            try:
                from core.models import UserManager
                user_manager = UserManager()
                user_manager.save_user_token(user_id, bot_id, token)
                logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id} - –Ω–µ —É–∫–∞–∑–∞–Ω user_id")
        
        # Register bot ownership if user_id is provided
        if user_id:
            try:
                from core.models import UserManager
                user_manager = UserManager()
                user_manager.register_bot_ownership(user_id, bot_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ {bot_id}: {e}")
        
        logger.info(f"‚úÖ –ë–æ—Ç {bot_id} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return {
            "status": "success", 
            "message": f"–ë–æ—Ç '{bot_id}' —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω",
            "bot_info": {
                "username": bot_info.username,
                "name": f"{bot_info.first_name} {bot_info.last_name or ''}".strip()
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–æ—Ç–∞: {e}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}"}

@app.post("/api/export_bot_zip/{bot_id}/")
def export_bot_zip(bot_id: str):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –≤ –≤–∏–¥–µ ZIP-–∞—Ä—Ö–∏–≤–∞ —Å –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ —Ç–æ–∫–µ–Ω
        scenario = load_scenario(bot_id)
        if not scenario.nodes:
            raise HTTPException(status_code=404, detail="–°—Ü–µ–Ω–∞—Ä–∏–π –±–æ—Ç–∞ –ø—É—Å—Ç")
        
        token = get_bot_token(bot_id)
        if not token:
            raise HTTPException(status_code=404, detail="–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–±–æ—Ä–∫–∏ –∞—Ä—Ö–∏–≤–∞
        with tempfile.TemporaryDirectory() as temp_dir:
            bot_dir = os.path.join(temp_dir, f"bot_{bot_id}")
            os.makedirs(bot_dir)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–¥–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            copy_core_files(bot_dir)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
            create_bot_config(bot_dir, bot_id, scenario, token)
            
            # –°–æ–∑–¥–∞–µ–º main.py –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            create_deployment_main(bot_dir, bot_id)
            
            # –°–æ–∑–¥–∞–µ–º requirements.txt
            create_requirements_txt(bot_dir)
            
            # –°–æ–∑–¥–∞–µ–º README —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            create_readme(bot_dir, bot_id)
            
            # –°–æ–∑–¥–∞–µ–º ZIP-–∞—Ä—Ö–∏–≤
            zip_path = os.path.join(temp_dir, f"bot_{bot_id}_deploy.zip")
            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(bot_dir):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arc_name = os.path.relpath(file_path, temp_dir)
                        zipf.write(file_path, arc_name)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤ –≤ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ
            final_zip_path = f"bot_{bot_id}_deploy.zip"
            shutil.copy2(zip_path, final_zip_path)
            
            logger.info(f"üì¶ –≠–∫—Å–ø–æ—Ä—Ç ZIP-–∞—Ä—Ö–∏–≤–∞ –¥–ª—è –±–æ—Ç–∞ {bot_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            return FileResponse(
                path=final_zip_path,
                filename=f"bot_{bot_id}_deploy.zip",
                media_type='application/zip'
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ ZIP-–∞—Ä—Ö–∏–≤–∞ –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {str(e)}")

def copy_core_files(bot_dir: str):
    """–ö–æ–ø–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–¥–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É –±–æ—Ç–∞"""
    # –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ blocks
    blocks_src = "blocks"
    blocks_dst = os.path.join(bot_dir, "blocks")
    if os.path.exists(blocks_src):
        shutil.copytree(blocks_src, blocks_dst)
    
    # –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ core
    core_src = "core"
    core_dst = os.path.join(bot_dir, "core")
    if os.path.exists(core_src):
        shutil.copytree(core_src, core_dst)
    
    # –°–æ–∑–¥–∞–µ–º __init__.py —Ñ–∞–π–ª—ã
    with open(os.path.join(bot_dir, "__init__.py"), "w") as f:
        f.write("")
    
    with open(os.path.join(blocks_dst, "__init__.py"), "w") as f:
        f.write("")
    
    with open(os.path.join(core_dst, "__init__.py"), "w") as f:
        f.write("")

def create_bot_config(bot_dir: str, bot_id: str, scenario: Scenario, token: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É bots –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    bots_dir = os.path.join(bot_dir, "bots")
    os.makedirs(bots_dir, exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    scenario_path = os.path.join(bots_dir, f"bot_{bot_id}.json")
    with open(scenario_path, "w", encoding="utf-8") as f:
        json.dump(scenario.dict(), f, ensure_ascii=False, indent=2)
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º
    env_path = os.path.join(bot_dir, ".env")
    with open(env_path, "w", encoding="utf-8") as f:
        f.write(f"BOT_TOKEN={token}\n")

def create_deployment_main(bot_dir: str, bot_id: str):
    """–°–æ–∑–¥–∞–µ—Ç main.py –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ"""
    main_content = f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–ø–ª–æ–π–º–µ–Ω—Ç –±–æ—Ç–∞ "{bot_id}" –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
"""

import os
import sys
import logging
import json
import subprocess
import time
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.scenario_runner import ScenarioRunner
from core.block_registry import block_registry
import telebot
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
need_restart = False
last_update_check = datetime.now()


def check_for_updates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ GitHub"""
    global need_restart, last_update_check
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
    if datetime.now() - last_update_check < timedelta(minutes=60):
        return False
    
    last_update_check = datetime.now()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ git
        result = subprocess.run(['git', '--version'], capture_output=True, text=True)
        if result.returncode != 0:
            logger.info("Git –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        result = subprocess.run(['git', 'status', '--porcelain'], capture_output=True, text=True)
        if result.returncode != 0:
            logger.info("–ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        subprocess.run(['git', 'fetch'], check=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã
        local_hash = subprocess.run(['git', 'rev-parse', 'HEAD'], capture_output=True, text=True, check=True)
        remote_hash = subprocess.run(['git', 'rev-parse', '@{{u}}'], capture_output=True, text=True, check=True)
        
        if local_hash.stdout.strip() != remote_hash.stdout.strip():
            logger.info("–ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            subprocess.run(['git', 'pull'], check=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if os.path.exists('requirements.txt'):
                subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], check=True)
            
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
            need_restart = True
            return True
        else:
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
            
    except subprocess.CalledProcessError as ex:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {{ex}}")
        return False
    except Exception as ex:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {{ex}}")
        return False


def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    global need_restart
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            if check_for_updates():
                logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
                continue
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞
            from dotenv import load_dotenv
            load_dotenv()
            bot_token = os.getenv("BOT_TOKEN")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ .env, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if not bot_token:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
            scenario_path = f"bots/bot_{bot_id}.json"
            if not os.path.exists(scenario_path):
                logger.error("–§–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            with open(scenario_path, "r", encoding="utf-8") as f:
                scenario_data = json.load(f)
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏—è
            scenario_runner = ScenarioRunner(scenario_data)
            if not scenario_runner.nodes_map:
                logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏!")
                return
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            bot = telebot.TeleBot(bot_token)
            bot_info = bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{{bot_info.username}}")
            
            @bot.message_handler(commands=['start', 'help'])
            def handle_start(message):
                try:
                    logger.info(f"üë§ /start –æ—Ç {{message.chat.id}} - {{message.from_user.username}}")
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª
                    start_node = next((node_id for node_id, block in scenario_runner.nodes_map.items()
                                       if hasattr(block, 'type') and block.type == 'start'), None)
                    if start_node:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        next_node_id = scenario_runner.process_node(bot, message.chat.id, start_node)
                        while next_node_id:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞
                            next_block = scenario_runner.nodes_map.get(next_node_id)
                            if next_block and hasattr(next_block, 'type'):
                                # –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                                if next_block.type in ['button', 'inline_button', 'input', 'menu']:
                                    scenario_runner.process_node(bot, message.chat.id, next_node_id)
                                    break
                                else:
                                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤
                                    scenario_runner.process_node(bot, message.chat.id, next_node_id)
                                    next_node_id = scenario_runner.get_next_node_id(next_node_id)
                            else:
                                scenario_runner.process_node(bot, message.chat.id, next_node_id)
                                next_node_id = scenario_runner.get_next_node_id(next_node_id)
                    else:
                        bot.send_message(message.chat.id, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {{e}}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤ (–∫–Ω–æ–ø–∫–∏, inline-–∫–Ω–æ–ø–∫–∏ –∏ —Ç.–¥.)
            # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            
            logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            def polling_thread():
                bot.polling(none_stop=True)
            
            poll_thread = threading.Thread(target=polling_thread)
            poll_thread.daemon = True
            poll_thread.start()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            while poll_thread.is_alive():
                time.sleep(600)  # 10 –º–∏–Ω—É—Ç
                if check_for_updates():
                    logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
                    bot.stop_polling()
                    break
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {{e}}")
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            time.sleep(10)
            
        # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
        break


if __name__ == "__main__":
    run_bot()
'''
    
    main_path = os.path.join(bot_dir, "main.py")
    with open(main_path, "w", encoding="utf-8") as f:
        f.write(main_content)

def create_requirements_txt(bot_dir: str):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    requirements_content = '''pyTelegramBotAPI>=4.0.0
requests>=2.25.0
'''
    
    req_path = os.path.join(bot_dir, "requirements.txt")
    with open(req_path, "w", encoding="utf-8") as f:
        f.write(requirements_content)

def create_readme(bot_dir: str, bot_id: str):
    """–°–æ–∑–¥–∞–µ—Ç README —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é"""
    readme_content = f'''# –ë–æ—Ç "{bot_id}" –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ

## –û–ø–∏—Å–∞–Ω–∏–µ
–≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –±–æ—Ç, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ Telegram –±–æ—Ç–æ–≤.

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
- `main.py` - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
- `.env` - —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
- `bots/bot_{bot_id}.json` - —Ñ–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏—è –±–æ—Ç–∞
- `blocks/` - –ø–∞–ø–∫–∞ —Å –±–ª–æ–∫–∞–º–∏ –±–æ—Ç–∞
- `core/` - –ø–∞–ø–∫–∞ —Å —è–¥—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã
- `requirements.txt` - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8 –∏–ª–∏ –≤—ã—à–µ
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
   ```bash
   pip install -r requirements.txt
   ```
3. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `.env` –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:
   ```
   BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å
   ```
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:
   ```bash
   python main.py
   ```

## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ GitHub

–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub. –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:

1. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –ø–∞–ø–∫–µ –±–æ—Ç–∞:
   ```bash
   git init
   git remote add origin <URL_–≤–∞—à–µ–≥–æ_—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è>
   git add .
   git commit -m "Initial commit"
   git push -u origin main
   ```

3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Git

4. –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç

5. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç:
   - –í—ã–ø–æ–ª–Ω–∏—Ç `git pull` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç –Ω–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt (–µ—Å–ª–∏ –µ—Å—Ç—å)
   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

## –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É `/update` (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è) –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞.

## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ

### Heroku
1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Heroku
2. –î–æ–±–∞–≤—å—Ç–µ buildpack –¥–ª—è Python
3. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ –ø—Ä–æ–µ–∫—Ç
4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

### PythonAnywhere
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ git
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py –∫–∞–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

### –î—Ä—É–≥–∏–µ —Ö–æ—Å—Ç–∏–Ω–≥–∏
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π long polling, –ø–æ—ç—Ç–æ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ö–æ—Å—Ç–∏–Ω–≥–æ–≤.

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É –±–æ—Ç–æ–≤.
'''
    
    readme_path = os.path.join(bot_dir, "README.md")
    with open(readme_path, "w", encoding="utf-8") as f:
        f.write(readme_content)

def get_bot_token(bot_id: str) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞: {bot_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from core.models import UserManager
        user_manager = UserManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
        owner_id = user_manager.get_bot_owner(bot_id)
        logger.info(f"ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ {bot_id}: {owner_id}")
        
        if owner_id:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
            token = user_manager.get_user_token(owner_id, bot_id)
            logger.info(f"–¢–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞ {bot_id}: {'*' * 10 if token else 'None'}")  # –°–∫—Ä—ã–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            
            if token:
                logger.info(f"–¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id} –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {owner_id}")
                return token
            else:
                logger.info(f"–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞ {bot_id}")
        else:
            logger.info(f"–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    logger.info(f"–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id}")
    return None

@app.get("/api/stop_bot/{bot_id}/")
def stop_bot(bot_id: str):
    try:
        if bot_id not in running_bots:
            return {"status": "error", "message": "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω."}
        
        logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ {bot_id}...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        bot_stop_flags[bot_id] = True
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –µ—Å–ª–∏ –µ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot_instance_key = f"{bot_id}_instance"
        if bot_instance_key in running_bots:
            try:
                bot_instance = running_bots[bot_instance_key]
                logger.info(f".MouseEvent –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –¥–ª—è –±–æ—Ç–∞ {bot_id}")
                bot_instance.stop_polling()
                del running_bots[bot_instance_key]
                logger.info("‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling: {e}")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
        import time
        time.sleep(3)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ running_bots
        if bot_id in running_bots:
            thread = running_bots[bot_id]
            del running_bots[bot_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ç–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
            if thread.is_alive():
                logger.warning(f"‚ö†Ô∏è –ü–æ—Ç–æ–∫ –±–æ—Ç–∞ {bot_id} –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞–µ–º –µ—â–µ 2 —Å–µ–∫—É–Ω–¥—ã...")
                time.sleep(2)
                if thread.is_alive():
                    logger.error(f"‚ùå –ü–æ—Ç–æ–∫ –±–æ—Ç–∞ {bot_id} –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    logger.info(f"‚úÖ –ü–æ—Ç–æ–∫ –±–æ—Ç–∞ {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        logger.info(f"‚úÖ –ë–æ—Ç {bot_id} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return {"status": "success", "message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_id}: {e}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}"}

@app.post("/api/run_bot/{bot_id}/")
def run_bot_endpoint(bot_id: str, token_data: TokenData):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    try:
        token = token_data.token
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        if not validate_telegram_token(token):
            raise HTTPException(status_code=400, detail="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        if not check_token_sync(token):
            raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω
        if bot_id in running_bots:
            logger.info(f"üõë –ë–æ—Ç {bot_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º")
            stop_bot(bot_id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = load_scenario(bot_id)
        if not scenario.nodes:
            raise HTTPException(status_code=400, detail="–°—Ü–µ–Ω–∞—Ä–∏–π –±–æ—Ç–∞ –ø—É—Å—Ç")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        bot_thread = threading.Thread(
            target=start_telegram_bot,
            args=(token, scenario.dict(), bot_id),
            name=f"bot_{bot_id}_{bot_restart_counter.get(bot_id, 0)}"
        )
        bot_thread.daemon = True
        bot_thread.start()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ç–æ–∫
        running_bots[bot_id] = bot_thread
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
        bot_restart_counter[bot_id] = bot_restart_counter.get(bot_id, 0) + 1
        
        logger.info(f"‚úÖ –ë–æ—Ç {bot_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ –ø–æ—Ç–æ–∫–µ {bot_thread.name}")
        return {"status": "success", "message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")

@app.get("/api/health/")
def health_check():
    return {
        "status": "healthy",
        "network": "ok" if check_telegram_connection() else "error",
        "active_bots": len(running_bots),
        "timestamp": time.time(),
        "message": "Server is running and accepting requests"
    }

# ========== –≠–ù–î–ü–û–ò–ù–¢–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ==========

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_manager = None

def get_user_manager():
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    global user_manager
    if user_manager is None:
        from core.models import UserManager
        user_manager = UserManager()
    return user_manager

@app.options("/api/register/")
async def api_register_options():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    response = JSONResponse({"status": "success"})
    response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
    response.headers["Access-Control-Allow-Credentials"] = "true"
    response.headers["Access-Control-Allow-Methods"] = "POST, OPTIONS"
    response.headers["Access-Control-Allow-Headers"] = "*"
    return response

@app.post("/api/register/")
async def api_register_user(user_data: RegisterUserRequest):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"Registration attempt with data: username={user_data.username}, email={user_data.email}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if not user_data.username or not user_data.email or not user_data.password:
            logger.warning("Missing required fields in registration request")
            raise HTTPException(status_code=400, detail="Missing required fields")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_manager = get_user_manager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = user_manager.register_user(user_data.username, user_data.email, user_data.password)
        
        if success:
            logger.info(f"User {user_data.username} registered successfully")
            response_data = {"status": "success", "message": "User registered successfully"}
            # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
            response = JSONResponse(response_data)
            response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
            response.headers["Access-Control-Allow-Credentials"] = "true"
            return response
        else:
            logger.warning(f"User registration failed for {user_data.username}")
            raise HTTPException(status_code=400, detail="User already exists or registration failed")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error registering user: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.options("/api/login/")
async def api_login_options():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    response = JSONResponse({"status": "success"})
    response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
    response.headers["Access-Control-Allow-Credentials"] = "true"
    response.headers["Access-Control-Allow-Methods"] = "POST, OPTIONS"
    response.headers["Access-Control-Allow-Headers"] = "*"
    return response

@app.post("/api/login/")
async def api_login_user(user_data: LoginUserRequest):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        print(f"Login attempt with username: {user_data.username}")
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_manager = get_user_manager()
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = user_manager.authenticate_user(user_data.username, user_data.password)
        print(f"Authentication result: {user}")
        
        if user:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
            user_dict = user.model_dump()
            user_dict.pop("password_hash", None)
            print(f"User dict: {user_dict}")
            response_data = {"status": "success", "user": user_dict, "message": "Login successful"}
            # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
            response = JSONResponse(response_data)
            response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
            response.headers["Access-Control-Allow-Credentials"] = "true"
            return response
        else:
            print("Invalid credentials")
            raise HTTPException(status_code=401, detail="Invalid credentials")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error logging in user: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# ========== –≠–ù–î–ü–û–ò–ù–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–û–ö–ï–ù–ê–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==========

@app.options("/api/user/save_token/")
async def api_save_user_token_options():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    response = JSONResponse({"status": "success"})
    response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
    response.headers["Access-Control-Allow-Credentials"] = "true"
    response.headers["Access-Control-Allow-Methods"] = "POST, OPTIONS"
    response.headers["Access-Control-Allow-Headers"] = "*"
    return response

@app.post("/api/user/save_token/")
async def api_save_user_token(token_data: SaveTokenRequest):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_manager = get_user_manager()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        success = user_manager.save_user_token(token_data.user_id, token_data.bot_id, token_data.token)
        
        if success:
            response_data = {"message": "Token saved successfully"}
            # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
            response = JSONResponse(response_data)
            response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
            response.headers["Access-Control-Allow-Credentials"] = "true"
            return response
        else:
            raise HTTPException(status_code=500, detail="Failed to save token")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error saving user token: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/user/get_token/{bot_id}/")
async def api_get_user_token(bot_id: str, user_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_manager = get_user_manager()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token = user_manager.get_user_token(user_id, bot_id)
        
        if token:
            return {"token": token}
        else:
            raise HTTPException(status_code=404, detail="Token not found")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting user token: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.options("/api/user/{user_id}/")
async def delete_user_options(user_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    response = JSONResponse({"status": "success"})
    response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
    response.headers["Access-Control-Allow-Credentials"] = "true"
    response.headers["Access-Control-Allow-Methods"] = "DELETE, OPTIONS"
    response.headers["Access-Control-Allow-Headers"] = "*"
    return response

@app.delete("/api/user/{user_id}/")
def delete_user(user_id: str, deleted_by_user_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ–π —Å–≤—è–∑–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è super_admin)"""
    try:
        print(f"API call to delete_user: user_id={user_id}, deleted_by={deleted_by_user_id}")
        
        # Validate input parameters
        if not user_id or not deleted_by_user_id:
            raise HTTPException(status_code=400, detail="User ID and deleted_by_user_id are required")
        
        # Get user manager
        from core.models import UserManager
        user_manager = UserManager()
        
        # Delete user and associated data
        success = user_manager.delete_user_and_associated_data(user_id, deleted_by_user_id)
        
        if success:
            logger.info(f"User {user_id} and all associated data successfully deleted by {deleted_by_user_id}")
            return {"status": "success", "message": "User and all associated data successfully deleted"}
        else:
            raise HTTPException(status_code=400, detail="Failed to delete user or user not found")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error deleting user {user_id}: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.delete("/api/user/delete_token/{bot_id}/")
async def api_delete_user_token(bot_id: str, user_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_manager = get_user_manager()
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
        success = user_manager.delete_user_token(user_id, bot_id)
        
        if success:
            return {"message": "Token deleted successfully"}
        else:
            raise HTTPException(status_code=500, detail="Failed to delete token")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error deleting user token: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/bot_status/")
def get_bot_status():
    statuses = {}
    for bot_id, thread in running_bots.items():
        statuses[bot_id] = {
            "is_alive": thread.is_alive(),
            "thread_name": thread.name,
        }
    return statuses

@app.get("/api/bot_running_status/{bot_id}/")
def get_bot_running_status(bot_id: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç"""
    is_running = bot_id in running_bots and running_bots[bot_id].is_alive()
    return {"is_running": is_running}

@app.get("/api/bot_info/{bot_id}/")
def get_bot_info(bot_id: str):
    scenario = load_scenario(bot_id)
    # –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = get_bot_token(bot_id)

    node_stats = {}
    for node in scenario.nodes:
        if node.type not in node_stats:
            node_stats[node.type] = 0
        node_stats[node.type] += 1

    return {
        "bot_id": bot_id,
        "has_token": bool(token),
        "nodes_count": len(scenario.nodes),
        "edges_count": len(scenario.edges),
        "node_stats": node_stats,
        "is_running": bot_id in running_bots and running_bots[bot_id].is_alive()
    }

@app.get("/api/get_scenario/{bot_id}/")
def get_scenario(bot_id: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –±–æ—Ç–∞ –∏–∑ –ø–∞–ø–∫–∏ bots/"""
    try:
        scenario = load_scenario(bot_id)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º model_dump –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Pydantic V2
        scenario_dict = scenario.model_dump()
        
        # –î–æ–±–∞–≤–ª—è–µ–º adminChatId –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        if 'admin_chat_id' in scenario_dict and scenario_dict['admin_chat_id']:
            scenario_dict['adminChatId'] = scenario_dict['admin_chat_id']
        
        return scenario_dict
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {str(e)}")

@app.post("/api/rename_bot/{old_bot_id}/{new_bot_id}/")
def rename_bot(old_bot_id: str, new_bot_id: str):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π ID –Ω–µ –ø—É—Å—Ç–æ–π
        if not new_bot_id.strip():
            raise HTTPException(status_code=400, detail="–ù–æ–≤–æ–µ –∏–º—è –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å –Ω–æ–≤—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        new_file_path = bot_file(new_bot_id)
        if os.path.exists(new_file_path):
            raise HTTPException(status_code=400, detail=f"–ë–æ—Ç —Å –∏–º–µ–Ω–µ–º '{new_bot_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å —Å—Ç–∞—Ä—ã–º ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        old_file_path = bot_file(old_bot_id)
        if not os.path.exists(old_file_path):
            raise HTTPException(status_code=404, detail=f"–ë–æ—Ç '{old_bot_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å—Ü–µ–Ω–∞—Ä–∏—è
        os.rename(old_file_path, new_file_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_manager = get_user_manager()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
            owner_id = user_manager.get_bot_owner(old_bot_id)
            if owner_id:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
                token = user_manager.get_user_token(owner_id, old_bot_id)
                if token:
                    # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
                    user_manager.delete_user_token(owner_id, old_bot_id)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
                    user_manager.save_user_token(owner_id, new_bot_id, token)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
                user_manager.register_bot_ownership(owner_id, new_bot_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        if old_bot_id in running_bots:
            bot_stop_flags[old_bot_id] = True
            del running_bots[old_bot_id]
        
        logger.info(f"‚úÖ –ë–æ—Ç '{old_bot_id}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_bot_id}'")
        return {
            "status": "success", 
            "message": f"–ë–æ—Ç '{old_bot_id}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_bot_id}'",
            "new_bot_id": new_bot_id
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ '{old_bot_id}': {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {str(e)}")

@app.get("/api/get_bots/")
def get_bots_endpoint(user_id: Optional[str] = None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—Å–µ –±–æ—Ç—ã –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_id –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        if user_id == "undefined" or not user_id:
            # Return empty list for invalid user_id
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_manager = get_user_manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º
        is_admin = user_manager.is_super_admin(user_id)
        
        if is_admin:
            # –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –±–æ—Ç—ã
            bots = user_manager.get_all_bots_for_super_admin()
        else:
            # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –±–æ—Ç—ã
            bots = user_manager.get_user_bots(user_id)
        
        return bots
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []

@app.get("/api/get_all_users/")
def get_all_users_endpoint(user_id: Optional[str] = None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_id –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        if user_id == "undefined" or not user_id:
            logger.info("Invalid user_id: undefined or empty")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_manager = get_user_manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º
        is_admin = user_manager.is_super_admin(user_id)
        logger.info(f"User {user_id} is super admin: {is_admin}")
        
        if is_admin:
            # –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = user_manager.get_all_users()
            logger.info(f"Returning {len(users)} users for super admin {user_id}")
        else:
            # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞
            users = []
            logger.info(f"User {user_id} is not super admin, returning empty list")
        
        return users
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return []

@app.post("/api/create_bot/")
def create_bot(bot_id: str, user_id: str):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ø—É—Å—Ç—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º"""
    try:
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞: bot_id={bot_id}, user_id={user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ bot_id –∏ user_id –Ω–µ –ø—É—Å—Ç—ã–µ
        if not bot_id or not user_id:
            raise HTTPException(status_code=400, detail="Bot ID and User ID are required")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å —Ç–∞–∫–∏–º ID –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        from core.models import UserManager
        user_manager = UserManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±–æ—Ç —Å —Ç–∞–∫–∏–º ID
        existing_owner = user_manager.get_bot_owner(bot_id)
        if existing_owner:
            raise HTTPException(status_code=400, detail=f"–ë–æ—Ç —Å ID '{bot_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        empty_scenario = Scenario(nodes=[], edges=[])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        save_scenario(bot_id, empty_scenario, user_id)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ—Ç–∞
        user_manager.register_bot_ownership(user_id, bot_id)
        
        logger.info(f"‚úÖ –ë–æ—Ç {bot_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return {
            "status": "success", 
            "message": f"–ë–æ—Ç '{bot_id}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            "bot_id": bot_id
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {str(e)}")

@app.post("/api/save_scenario/{bot_id}/")
def save_scenario_endpoint(bot_id: str, scenario: Scenario, user_id: Optional[str] = Query(None)):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –±–æ—Ç–∞"""
    try:
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –±–æ—Ç–∞: {bot_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        save_scenario(bot_id, scenario, user_id)
        
        logger.info(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id}")
        return {"status": "success", "message": "–°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"}
        
    except ValueError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {str(e)}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {str(e)}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from core.models import UserManager, User, UserToken
from core.db import db

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
ENCRYPTION_KEY = os.getenv("ENCRYPTION_KEY")
if not ENCRYPTION_KEY:
    # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á
    ENCRYPTION_KEY = Fernet.generate_key().decode()
    logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ENCRYPTION_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —à–∏—Ñ—Ä–∞—Ç–æ—Ä–∞
cipher_suite = Fernet(ENCRYPTION_KEY.encode())

def encrypt_token(token: str) -> str:
    """–®–∏—Ñ—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω"""
    if not token:
        return ""
    try:
        encrypted_token = cipher_suite.encrypt(token.encode())
        return encrypted_token.decode()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return ""

def decrypt_token(encrypted_token: str) -> str:
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω"""
    if not encrypted_token:
        return ""
    try:
        decrypted_token = cipher_suite.decrypt(encrypted_token.encode())
        return decrypted_token.decode()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return ""


# ========== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ==========
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    os.makedirs(BOTS_DIR, exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not db.connect():
        logger.error("Failed to connect to database")
        exit(1)
    
    if not db.create_tables():
        logger.error("Failed to create database tables")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ FastAPI –Ω–∞ –ø–æ—Ä—Ç—É 8002")
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8002,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 8002
        log_level="info"
    )
