from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional, Dict
import os, json, time
from fastapi.middleware.cors import CORSMiddleware
import telebot
import threading
import uvicorn
import logging
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# –ò–º–ø–æ—Ä—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–ª–æ–∫–æ–≤
from core.block_registry import block_registry
from core.scenario_runner import ScenarioRunner

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = FastAPI()

# ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# ========== –ú–û–î–ï–õ–ò ==========
class ButtonData(BaseModel):
    label: str


class NodeData(BaseModel):
    label: Optional[str] = None
    url: Optional[str] = None
    images: Optional[List[str]] = None
    buttons: Optional[List[ButtonData]] = None
    condition: Optional[str] = None
    variableName: Optional[str] = None
    method: Optional[str] = None
    payload: Optional[str] = None
    target_node: Optional[str] = None
    onChange: Optional[object] = None
    blockType: Optional[str] = None


class Node(BaseModel):
    id: str
    type: Optional[str] = None
    data: NodeData
    position: Dict


class Edge(BaseModel):
    id: Optional[str] = None
    source: str
    target: str
    sourceHandle: Optional[str] = None


class Scenario(BaseModel):
    nodes: List[Node]
    edges: List[Edge]


# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
BOTS_DIR = "bots"
os.makedirs(BOTS_DIR, exist_ok=True)
TOKENS_FILE = "bot_tokens.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏
running_bots = {}
bot_stop_flags = {}


def load_tokens():
    if os.path.exists(TOKENS_FILE):
        try:
            with open(TOKENS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}


def save_tokens(tokens):
    with open(TOKENS_FILE, 'w', encoding='utf-8') as f:
        json.dump(tokens, f, ensure_ascii=False, indent=2)


def bot_file(bot_id: str) -> str:
    return os.path.join(BOTS_DIR, f"bot_{bot_id}.json")


def load_scenario(bot_id: str) -> Scenario:
    file_path = bot_file(bot_id)
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                return Scenario(**data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è {bot_id}: {e}")
            return Scenario(nodes=[], edges=[])
    return Scenario(nodes=[], edges=[])


def save_scenario(bot_id: str, scenario: Scenario):
    try:
        with open(bot_file(bot_id), "w", encoding="utf-8") as f:
            json.dump(scenario.dict(), f, ensure_ascii=False, indent=2)
        logger.info(f"–°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è {bot_id}: {e}")


# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def validate_telegram_token(token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ Telegram"""
    if not token:
        return False
    if ":" not in token:
        return False
    parts = token.split(":")
    if len(parts) != 2:
        return False
    if not parts[0].isdigit() or len(parts[0]) < 5:
        return False
    if len(parts[1]) < 20:
        return False
    return True


def check_telegram_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
    try:
        response = requests.get('https://api.telegram.org', timeout=10)
        return response.status_code == 200
    except:
        return False


def start_telegram_bot(token: str, scenario_data: dict, bot_id: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ {bot_id} —Å —Ç–æ–∫–µ–Ω–æ–º: {token[:10]}...")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    bot_stop_flags[bot_id] = False

    max_retries = 3
    retry_delay = 15

    for attempt in range(max_retries):
        try:
            if bot_stop_flags.get(bot_id, True):
                logger.info(f"‚èπÔ∏è –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            test_bot = telebot.TeleBot(token)
            bot_info = test_bot.get_me()
            logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –≤–µ—Ä–Ω—ã–π. –ë–æ—Ç: @{bot_info.username}")

            # –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏—è
            scenario_runner = ScenarioRunner(scenario_data)
            if not scenario_runner.nodes_map:
                logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏!")
                return

            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
            bot = telebot.TeleBot(token)
            logger.info(f"ü§ñ –ë–æ—Ç @{bot_info.username} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

            @bot.message_handler(commands=['start', 'help'])
            def handle_start(message):
                try:
                    logger.info(f"üë§ /start –æ—Ç {message.chat.id} - {message.from_user.username}")
                    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª
                    start_node = next((node_id for node_id, block in scenario_runner.nodes_map.items()
                                       if hasattr(block, 'type') and block.type == 'start'), None)
                    if start_node:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        next_node_id = scenario_runner.process_node(bot, message.chat.id, start_node)
                        while next_node_id:
                            next_node_id = scenario_runner.process_node(bot, message.chat.id, next_node_id)
                    else:
                        bot.send_message(message.chat.id, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (inline-–∫–Ω–æ–ø–∫–∏)
            @bot.callback_query_handler(func=lambda call: True)
            def handle_callback_query(call):
                try:
                    logger.info(f"üîò Callback –æ—Ç {call.from_user.id}: {call.data}")

                    # –ò—â–µ–º –±–ª–æ–∫ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç callback_data
                    for node_id, block in scenario_runner.nodes_map.items():
                        if hasattr(block, 'type') and block.type == 'inline_button':
                            buttons = block.node_data.get('data', {}).get('buttons', [])
                            for button in buttons:
                                callback_data = button.get('callbackData',
                                                           f"btn_{hash(button.get('label', '')) % 10000}")
                                if callback_data == call.data:
                                    scenario_runner.handle_inline_button_press(bot, call, node_id, call.data)
                                    return

                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É
                    bot.answer_callback_query(call.id, text="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
                    try:
                        bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                    except:
                        pass

            @bot.message_handler(func=lambda message: True)
            def handle_all_messages(message):
                try:
                    logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.chat.id}: {message.text}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
                    for node_id, block in scenario_runner.nodes_map.items():
                        if hasattr(block, 'type') and block.type == 'button':
                            buttons = block.node_data.get('data', {}).get('buttons', [])
                            for index, button in enumerate(buttons):
                                if button.get('label') == message.text:
                                    logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {message.text}")
                                    result = scenario_runner.handle_button_press(bot, message.chat.id, node_id, index)
                                    if result:
                                        return

                    # –ï—Å–ª–∏ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
                    bot.send_message(message.chat.id, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    try:
                        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    except:
                        pass

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            logger.info("üì° –ó–∞–ø—É—Å–∫–∞–µ–º polling...")

            while not bot_stop_flags.get(bot_id, True):
                try:
                    bot.polling(
                        none_stop=True,
                        interval=2,
                        timeout=20,
                        long_polling_timeout=20
                    )
                except Exception as e:
                    if bot_stop_flags.get(bot_id, True):
                        break
                    logger.error(f"üî• –û—à–∏–±–∫–∞ polling: {e}")
                    logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(10)

            logger.info(f"‚èπÔ∏è –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break

        except telebot.apihelper.ApiException as e:
            if "Unauthorized" in str(e):
                logger.error("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
                break
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
            time.sleep(retry_delay)
        except Exception as e:
            logger.error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            time.sleep(retry_delay)


# ========== API –≠–ù–î–ü–û–ò–ù–¢–´ ==========
@app.get("/")
def read_root():
    return {"message": "Telegram Bot Constructor API"}


@app.get("/get_bots/")
def get_bots():
    bots = []
    for filename in os.listdir(BOTS_DIR):
        if filename.startswith("bot_") and filename.endswith(".json"):
            bot_id = filename.replace("bot_", "").replace(".json", "")
            bots.append(bot_id)
    return {"bots": bots}


@app.post("/create_bot/")
def create_bot(bot_id: str):
    path = bot_file(bot_id)
    if os.path.exists(path):
        return {"status": "error", "message": "–ë–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
    save_scenario(bot_id, Scenario(nodes=[], edges=[]))
    return {"status": "success"}


@app.get("/get_scenario/{bot_id}/")
def get_scenario(bot_id: str):
    scenario = load_scenario(bot_id)
    return scenario


@app.post("/save_scenario/{bot_id}/")
def save_bot_scenario(bot_id: str, scenario: Scenario):
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –±–æ—Ç–∞ {bot_id}")
    save_scenario(bot_id, scenario)
    return {"status": "success"}


@app.delete("/delete_bot/{bot_id}/")
def delete_bot(bot_id: str):
    file_path = bot_file(bot_id)
    if os.path.exists(file_path):
        os.remove(file_path)
        tokens = load_tokens()
        if bot_id in tokens:
            del tokens[bot_id]
            save_tokens(tokens)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        if bot_id in running_bots:
            bot_stop_flags[bot_id] = True
            del running_bots[bot_id]

        return {"status": "success", "message": f"–ë–æ—Ç {bot_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."}
    raise HTTPException(status_code=404, detail=f"–ë–æ—Ç {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@app.post("/save_token/{bot_id}/")
def save_bot_token(bot_id: str, token_data: Dict[str, str]):
    tokens = load_tokens()
    tokens[bot_id] = token_data.get("token", "")
    save_tokens(tokens)
    logger.info(f"–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_id}")
    return {"status": "success"}


@app.get("/get_token/{bot_id}/")
def get_bot_token(bot_id: str):
    tokens = load_tokens()
    token = tokens.get(bot_id, "")
    return {"token": token}


@app.delete("/delete_token/{bot_id}/")
def delete_bot_token(bot_id: str):
    tokens = load_tokens()
    if bot_id in tokens:
        del tokens[bot_id]
        save_tokens(tokens)
        return {"status": "success"}
    return {"status": "error", "message": "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"}


@app.get("/check_token/{token}/")
def check_token(token: str):
    try:
        if not validate_telegram_token(token):
            return {"valid": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"}

        test_bot = telebot.TeleBot(token)
        bot_info = test_bot.get_me()

        return {
            "valid": True,
            "message": "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
            "bot_username": bot_info.username,
            "bot_name": f"{bot_info.first_name} {bot_info.last_name or ''}".strip()
        }

    except Exception as e:
        return {"valid": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"}


@app.get("/check_bot/{token}/")
def check_bot(token: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –±–æ—Ç —Å –¥–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    try:
        bot = telebot.TeleBot(token)
        bot_info = bot.get_me()
        return {
            "status": "success",
            "username": f"@{bot_info.username}",
            "name": f"{bot_info.first_name} {bot_info.last_name or ''}".strip(),
            "id": bot_info.id
        }
    except Exception as e:
        return {"status": "error", "message": str(e)}


@app.get("/available_blocks/")
def get_available_blocks():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤"""
    try:
        blocks = block_registry.get_available_blocks()
        return {"blocks": blocks}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤: {e}")
        return {"blocks": []}


@app.post("/run_bot/{bot_id}/")
def run_bot(bot_id: str, token: Dict[str, str]):
    if bot_id in running_bots and running_bots[bot_id].is_alive():
        return {"status": "error", "message": "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω."}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å
    try:
        response = requests.get('https://api.telegram.org', timeout=10)
        if response.status_code != 200:
            return {"status": "error", "message": "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"}
    except:
        return {"status": "error", "message": "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"}

    scenario_data = load_scenario(bot_id)
    if not scenario_data.nodes:
        return {"status": "error", "message": "–°—Ü–µ–Ω–∞—Ä–∏–π –ø—É—Å—Ç."}

    bot_token = token.get("token", "").strip()
    if not bot_token:
        return {"status": "error", "message": "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω."}

    if not validate_telegram_token(bot_token):
        return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞."}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    try:
        test_bot = telebot.TeleBot(bot_token)
        bot_info = test_bot.get_me()
        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –≤–µ—Ä–Ω—ã–π. –ë–æ—Ç: @{bot_info.username}")
    except telebot.apihelper.ApiException as e:
        if "Unauthorized" in str(e):
            return {"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"}
        else:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ Telegram API: {str(e)}"}
    except Exception as e:
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}"}

    try:
        thread = threading.Thread(
            target=start_telegram_bot,
            args=(bot_token, scenario_data.dict(), bot_id),
            name=f"Bot_{bot_id}"
        )
        thread.daemon = True
        thread.start()
        running_bots[bot_id] = thread

        return {"status": "success", "message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"}

    except Exception as e:
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"}


@app.post("/restart_bot/{bot_id}/")
def restart_bot(bot_id: str):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        bot_stop_flags[bot_id] = True

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
        time.sleep(2)

        # –£–¥–∞–ª—è–µ–º –∏–∑ running_bots
        if bot_id in running_bots:
            del running_bots[bot_id]

        logger.info(f"‚èπÔ∏è –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ —Ç–æ–∫–µ–Ω
        scenario_data = load_scenario(bot_id)
        tokens = load_tokens()
        bot_token = tokens.get(bot_id, "")

        if not bot_token:
            return {"status": "error", "message": "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        if not scenario_data.nodes:
            return {"status": "error", "message": "–°—Ü–µ–Ω–∞—Ä–∏–π –ø—É—Å—Ç"}

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ
        thread = threading.Thread(
            target=start_telegram_bot,
            args=(bot_token, scenario_data.dict(), bot_id),
            name=f"Bot_{bot_id}"
        )
        thread.daemon = True
        thread.start()
        running_bots[bot_id] = thread

        return {"status": "success", "message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!"}

    except Exception as e:
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {str(e)}"}


@app.get("/stop_bot/{bot_id}/")
def stop_bot(bot_id: str):
    if bot_id in running_bots:
        bot_stop_flags[bot_id] = True
        del running_bots[bot_id]
        return {"status": "success", "message": "–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞."}
    return {"status": "error", "message": "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω."}


@app.get("/health/")
def health_check():
    return {
        "status": "healthy",
        "network": "ok" if check_telegram_connection() else "error",
        "active_bots": len(running_bots),
        "timestamp": time.time()
    }


@app.get("/bot_status/")
def get_bot_status():
    statuses = {}
    for bot_id, thread in running_bots.items():
        statuses[bot_id] = {
            "is_alive": thread.is_alive(),
            "thread_name": thread.name,
        }
    return statuses

@app.get("/bot_running_status/{bot_id}/")
def get_bot_running_status(bot_id: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç"""
    is_running = bot_id in running_bots and running_bots[bot_id].is_alive()
    return {"is_running": is_running}

@app.get("/bot_info/{bot_id}/")
def get_bot_info(bot_id: str):
    scenario = load_scenario(bot_id)
    tokens = load_tokens()
    token = tokens.get(bot_id, "")

    node_stats = {}
    for node in scenario.nodes:
        if node.type not in node_stats:
            node_stats[node.type] = 0
        node_stats[node.type] += 1

    return {
        "bot_id": bot_id,
        "has_token": bool(token),
        "nodes_count": len(scenario.nodes),
        "edges_count": len(scenario.edges),
        "node_stats": node_stats,
        "is_running": bot_id in running_bots and running_bots[bot_id].is_alive()
    }


# ========== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ==========
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    os.makedirs(BOTS_DIR, exist_ok=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ FastAPI –Ω–∞ –ø–æ—Ä—Ç—É 8001")
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8001,
        log_level="info",
        timeout_keep_alive=30
    )